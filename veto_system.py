#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ø-–ø–æ–ª–µ–π –∏ VETO –ª–æ–≥–∏–∫–∏
–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

Data-driven –ø–æ–¥—Ö–æ–¥: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import yaml
import json
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score, classification_report
from sklearn.model_selection import cross_val_score


class VetoSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ø-–ø–æ–ª–µ–π –∏ VETO –ª–æ–≥–∏–∫–∏
    
    –ó–∞–¥–∞—á–∏:
    1. –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π-–±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤ (—Å—Ç–æ–ø-–ø–æ–ª—è)
    2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–∂–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    4. –°–∏—Å—Ç–µ–º–∞ "—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π" –Ω–∞ –≤—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É
    """
    
    def __init__(self, config_path="config.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VETO —Å–∏—Å—Ç–µ–º—ã"""
        self.config = self._load_config(config_path)
        
        # –î–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.data = None
        self.features = None
        self.targets = None
        self.veto_rules = {}
        self.blocking_fields = {}
        self.conflict_patterns = {}
        self.false_signal_analysis = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        veto_config = self.config.get('veto_system', {})
        self.enable_blocking = veto_config.get('enable_blocking', True)
        self.veto_thresholds = veto_config.get('veto_thresholds', {})
        self.min_confirming_signals = veto_config.get('min_confirming_signals', 2)
        
        # –ü–æ—Ä–æ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.high_volatility_threshold = self.veto_thresholds.get('high_volatility', 3.0)
        self.conflicting_signals_threshold = self.veto_thresholds.get('conflicting_signals', 0.7)
        self.low_confidence_threshold = self.veto_thresholds.get('low_confidence', 0.3)
        
        # –ì—Ä—É–ø–ø—ã –ø–æ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.field_groups = {
            'group_1': ['rd', 'md', 'cd', 'cmd', 'macd', 'od', 'dd', 'cvd', 'drd', 'ad', 'ed', 'hd', 'sd'],
            'group_2': ['ro', 'mo', 'co', 'cz', 'do', 'ae', 'so'],
            'group_3': ['rz', 'mz', 'ciz', 'sz', 'dz', 'cvz', 'maz', 'oz'],
            'group_4': ['ef', 'wv', 'vc', 'ze', 'nw', 'as', 'vw'],
            'group_5': ['bs', 'wa', 'pd']
        }
        
    def _load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            'veto_system': {
                'enable_blocking': True,
                'veto_thresholds': {
                    'high_volatility': 3.0,
                    'conflicting_signals': 0.7,
                    'low_confidence': 0.3
                },
                'min_confirming_signals': 2
            }
        }
        
        if Path(config_path).exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                user_config = yaml.safe_load(f)
                if user_config:
                    default_config.update(user_config)
        
        return default_config
    
    def analyze_veto_patterns(self, data, features, targets):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ VETO –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        
        Args:
            data: DataFrame —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            features: DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
            targets: DataFrame —Å —Ü–µ–ª–µ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        """
        print("üö´ –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–æ–ø-–ø–æ–ª–µ–π –∏ VETO –ª–æ–≥–∏–∫–∏...")
        
        self.data = data.copy()
        self.features = features.copy()
        self.targets = targets.copy()
        
        # –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π-–±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤
        self._find_blocking_fields()
        
        # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self._analyze_conflicting_signals()
        
        # –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è –ª–æ–∂–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        self._detect_false_activations()
        
        # –≠—Ç–∞–ø 4: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ VETO –ø—Ä–∞–≤–∏–ª
        self._build_veto_rules()
        
        # –≠—Ç–∞–ø 5: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        self._validate_veto_system()
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ VETO —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
        return self.veto_rules
    
    def _find_blocking_fields(self):
        """–ü–æ–∏—Å–∫ –ø–æ–ª–µ–π-–±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤"""
        print("üîç –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π-–±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤...")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏—â–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–Ω–∏–∂–∞—é—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        blocking_candidates = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä
        for feature in self.features.columns:
            try:
                blocking_analysis = self._analyze_field_as_blocker(feature)
                
                if blocking_analysis and blocking_analysis['blocking_strength'] > 0.1:
                    blocking_candidates[feature] = blocking_analysis
                    
            except Exception as e:
                continue
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        sorted_blockers = sorted(
            blocking_candidates.items(), 
            key=lambda x: x[1]['blocking_strength'], 
            reverse=True
        )
        
        # –û—Ç–±–æ—Ä —Ç–æ–ø –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤
        self.blocking_fields = dict(sorted_blockers[:20])  # –¢–æ–ø 20 –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(self.blocking_fields)} –ø–æ–ª–µ–π-–±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–æ–≤
        for field, analysis in list(self.blocking_fields.items())[:5]:
            print(f"     {field}: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {analysis['blocking_strength']:.3f}, –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã {analysis['false_positive_rate']:.1%}")
    
    def _analyze_field_as_blocker(self, field):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è
        field_data = pd.to_numeric(self.features[field], errors='coerce').fillna(0)
        
        if field_data.std() < 0.01:  # –ü–æ–ª–µ –±–µ–∑ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏)
        thresholds = np.percentile(np.abs(field_data), [70, 80, 90, 95])
        
        best_blocking_strength = 0
        best_threshold = None
        best_analysis = None
        
        for threshold in thresholds:
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è
            field_active = np.abs(field_data) > threshold
            
            if field_active.sum() < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            blocking_analysis = self._calculate_blocking_effect(field_active, field)
            
            if blocking_analysis['blocking_strength'] > best_blocking_strength:
                best_blocking_strength = blocking_analysis['blocking_strength']
                best_threshold = threshold
                best_analysis = blocking_analysis
                best_analysis['threshold'] = threshold
        
        return best_analysis
    
    def _calculate_blocking_effect(self, field_active_mask, field_name):
        """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        
        events = self.targets['is_event']
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø–æ–ª—è –∏ –±–µ–∑
        active_periods = field_active_mask
        inactive_periods = ~field_active_mask
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π baseline —Å–∏–≥–Ω–∞–ª (—Å—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π)
        other_fields = [col for col in self.features.columns if col != field_name]
        
        if len(other_fields) < 5:
            return {'blocking_strength': 0, 'false_positive_rate': 0}
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è baseline
        np.random.seed(42)
        sample_fields = np.random.choice(other_fields, min(10, len(other_fields)), replace=False)
        
        baseline_signal = self.features[sample_fields].abs().sum(axis=1)
        baseline_signal = (baseline_signal > baseline_signal.quantile(0.8)).astype(int)
        
        # –¢–æ—á–Ω–æ—Å—Ç—å baseline —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        if active_periods.sum() > 10 and inactive_periods.sum() > 10:
            
            # –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–≥–¥–∞ –ø–æ–ª–µ –ù–ï –∞–∫—Ç–∏–≤–Ω–æ
            accuracy_without_field = self._calculate_accuracy(
                baseline_signal[inactive_periods], 
                events[inactive_periods]
            )
            
            # –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–≥–¥–∞ –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç)
            accuracy_with_field = self._calculate_accuracy(
                baseline_signal[active_periods], 
                events[active_periods]
            )
            
            # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è
            blocking_strength = max(0, accuracy_without_field - accuracy_with_field)
            
            # –ß–∞—Å—Ç–æ—Ç–∞ –ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ç–∏–≤–æ–≤ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è
            false_positives = (baseline_signal[active_periods] == 1) & (events[active_periods] == 0)
            false_positive_rate = false_positives.sum() / max(1, active_periods.sum())
            
            return {
                'blocking_strength': blocking_strength,
                'false_positive_rate': false_positive_rate,
                'accuracy_without_field': accuracy_without_field,
                'accuracy_with_field': accuracy_with_field,
                'activations_count': active_periods.sum()
            }
        
        return {'blocking_strength': 0, 'false_positive_rate': 0}
    
    def _calculate_accuracy(self, predictions, actual):
        """–†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        if len(predictions) == 0 or len(actual) == 0:
            return 0
        
        correct = (predictions == actual).sum()
        total = len(actual)
        return correct / total if total > 0 else 0
    
    def _analyze_conflicting_signals(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏"""
        print("‚öîÔ∏è –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        self.conflict_patterns = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ–ª–µ–π
        for group1_name, group1_fields in self.field_groups.items():
            for group2_name, group2_fields in self.field_groups.items():
                if group1_name >= group2_name:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    continue
                
                conflict_analysis = self._analyze_group_conflicts(
                    group1_name, group1_fields, 
                    group2_name, group2_fields
                )
                
                if conflict_analysis['conflict_strength'] > self.conflicting_signals_threshold:
                    conflict_key = f"{group1_name}_vs_{group2_name}"
                    self.conflict_patterns[conflict_key] = conflict_analysis
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(self.conflict_patterns)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–æ–ø –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º
        sorted_conflicts = sorted(
            self.conflict_patterns.items(),
            key=lambda x: x[1]['conflict_strength'],
            reverse=True
        )
        
        for conflict_name, analysis in sorted_conflicts[:3]:
            print(f"     {conflict_name}: –∫–æ–Ω—Ñ–ª–∏–∫—Ç {analysis['conflict_strength']:.3f}")
    
    def _analyze_group_conflicts(self, group1_name, group1_fields, group2_name, group2_fields):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ–ª–µ–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø
        group1_activity = self._calculate_group_activity(group1_fields)
        group2_activity = self._calculate_group_activity(group2_fields)
        
        # –ò—â–µ–º –ø–µ—Ä–∏–æ–¥—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        both_active = (group1_activity > 0) & (group2_activity > 0)
        
        if both_active.sum() < 10:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return {'conflict_strength': 0, 'conflict_events': 0}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        group1_direction = self._determine_signal_direction(group1_fields, group1_activity > 0)
        group2_direction = self._determine_signal_direction(group2_fields, group2_activity > 0)
        
        # –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        conflicting_periods = both_active & (group1_direction * group2_direction < 0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        events_during_conflicts = self.targets['is_event'][conflicting_periods]
        
        if len(events_during_conflicts) > 0:
            conflict_success_rate = events_during_conflicts.mean()
            baseline_success_rate = self.targets['is_event'].mean()
            
            # –°–∏–ª–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–Ω–∏–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            conflict_strength = max(0, baseline_success_rate - conflict_success_rate)
            
            return {
                'conflict_strength': conflict_strength,
                'conflict_events': conflicting_periods.sum(),
                'conflict_success_rate': conflict_success_rate,
                'baseline_success_rate': baseline_success_rate,
                'group1_activity_rate': (group1_activity > 0).mean(),
                'group2_activity_rate': (group2_activity > 0).mean()
            }
        
        return {'conflict_strength': 0, 'conflict_events': 0}
    
    def _calculate_group_activity(self, group_fields):
        """–†–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª–µ–π"""
        group_activity = pd.Series(0.0, index=self.features.index)
        
        for field in group_fields:
            # –ò—â–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö
            field_columns = [col for col in self.features.columns if col.startswith(field)]
            
            for col in field_columns:
                field_data = pd.to_numeric(self.features[col], errors='coerce').fillna(0)
                group_activity += np.abs(field_data)
        
        return group_activity
    
    def _determine_signal_direction(self, group_fields, active_mask):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≥—Ä—É–ø–ø—ã"""
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è = +1, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ = -1
        directions = pd.Series(0.0, index=self.features.index)
        
        for field in group_fields:
            field_columns = [col for col in self.features.columns if col.startswith(field)]
            
            for col in field_columns:
                field_data = pd.to_numeric(self.features[col], errors='coerce').fillna(0)
                directions += np.sign(field_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        result = pd.Series(0.0, index=self.features.index)
        result[active_mask] = np.sign(directions[active_mask])
        
        return result
    
    def _detect_false_activations(self):
        """–î–µ—Ç–µ–∫—Ü–∏—è –ª–æ–∂–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π"""
        print("üé≠ –î–µ—Ç–µ–∫—Ü–∏—è –ª–æ–∂–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π...")
        
        self.false_signal_analysis = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for feature in self.features.columns:
            false_analysis = self._analyze_false_signals_for_field(feature)
            
            if false_analysis['false_positive_rate'] > 0.7:  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                self.false_signal_analysis[feature] = false_analysis
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(self.false_signal_analysis)} –ø–æ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –¢–æ–ø –ø–æ–ª–µ–π —Å –ª–æ–∂–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
        sorted_false = sorted(
            self.false_signal_analysis.items(),
            key=lambda x: x[1]['false_positive_rate'],
            reverse=True
        )
        
        for field, analysis in sorted_false[:5]:
            print(f"     {field}: –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã {analysis['false_positive_rate']:.1%}")
    
    def _analyze_false_signals_for_field(self, field):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—è"""
        
        field_data = pd.to_numeric(self.features[field], errors='coerce').fillna(0)
        
        if field_data.std() < 0.01:
            return {'false_positive_rate': 0, 'activations': 0}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è
        threshold = np.percentile(np.abs(field_data), 80)
        activations = np.abs(field_data) > threshold
        
        if activations.sum() < 5:
            return {'false_positive_rate': 0, 'activations': 0}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        events = self.targets['is_event']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        false_positives = 0
        total_activations = 0
        
        for idx in np.where(activations)[0]:
            total_activations += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–µ 5 –ø–µ—Ä–∏–æ–¥–æ–≤
            future_window = slice(idx + 1, min(len(events), idx + 6))
            future_events = events.iloc[future_window] if future_window.start < len(events) else []
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º - –ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if len(future_events) == 0 or future_events.sum() == 0:
                false_positives += 1
        
        false_positive_rate = false_positives / max(1, total_activations)
        
        return {
            'false_positive_rate': false_positive_rate,
            'activations': total_activations,
            'false_positives': false_positives,
            'threshold': threshold
        }
    
    def _build_veto_rules(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ VETO –ø—Ä–∞–≤–∏–ª"""
        print("üìã –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ VETO –ø—Ä–∞–≤–∏–ª...")
        
        self.veto_rules = {
            'blocking_fields': {},
            'conflict_rules': {},
            'false_signal_filters': {},
            'combination_rules': {}
        }
        
        # –ü—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        for field, analysis in self.blocking_fields.items():
            if analysis['blocking_strength'] > 0.15:  # –ó–Ω–∞—á–∏–º—ã–µ –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä—ã
                self.veto_rules['blocking_fields'][field] = {
                    'action': 'block_signal',
                    'threshold': analysis['threshold'],
                    'blocking_strength': analysis['blocking_strength'],
                    'condition': f"if abs({field}) > {analysis['threshold']:.3f} then BLOCK"
                }
        
        # –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        for conflict_name, analysis in self.conflict_patterns.items():
            if analysis['conflict_strength'] > 0.2:  # –ó–Ω–∞—á–∏–º—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                self.veto_rules['conflict_rules'][conflict_name] = {
                    'action': 'reduce_confidence',
                    'conflict_strength': analysis['conflict_strength'],
                    'confidence_penalty': min(0.5, analysis['conflict_strength']),
                    'condition': f"if {conflict_name} conflicting then REDUCE_CONFIDENCE"
                }
        
        # –§–∏–ª—å—Ç—Ä—ã –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for field, analysis in self.false_signal_analysis.items():
            if analysis['false_positive_rate'] > 0.8:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                self.veto_rules['false_signal_filters'][field] = {
                    'action': 'ignore_field',
                    'false_positive_rate': analysis['false_positive_rate'],
                    'condition': f"IGNORE {field} (false positive rate: {analysis['false_positive_rate']:.1%})"
                }
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        self._build_combination_rules()
        
        print(f"   –°–æ–∑–¥–∞–Ω–æ {len(self.veto_rules['blocking_fields'])} –ø—Ä–∞–≤–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        print(f"   –°–æ–∑–¥–∞–Ω–æ {len(self.veto_rules['conflict_rules'])} –ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
        print(f"   –°–æ–∑–¥–∞–Ω–æ {len(self.veto_rules['false_signal_filters'])} —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    def _build_combination_rules(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª"""
        
        # –ü—Ä–∞–≤–∏–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.veto_rules['combination_rules']['min_confirmations'] = {
            'action': 'require_multiple_signals',
            'min_signals': self.min_confirming_signals,
            'condition': f"REQUIRE at least {self.min_confirming_signals} confirming signals"
        }
        
        # –ü—Ä–∞–≤–∏–ª–æ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if 'volatility' in self.data.columns:
            volatility_data = pd.to_numeric(self.data['volatility'], errors='coerce').fillna(0)
            high_vol_threshold = volatility_data.quantile(0.9)
            
            self.veto_rules['combination_rules']['high_volatility'] = {
                'action': 'block_during_high_volatility',
                'threshold': high_vol_threshold,
                'condition': f"if volatility > {high_vol_threshold:.3f} then BLOCK"
            }
        
        # –ü—Ä–∞–≤–∏–ª–æ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        self.veto_rules['combination_rules']['low_confidence'] = {
            'action': 'block_low_confidence',
            'threshold': self.low_confidence_threshold,
            'condition': f"if confidence < {self.low_confidence_threshold:.2f} then BLOCK"
        }
    
    def _validate_veto_system(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è VETO —Å–∏—Å—Ç–µ–º—ã"""
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è VETO —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º VETO –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        original_signals = self._create_baseline_signals()
        filtered_signals = self._apply_veto_rules(original_signals)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è VETO
        original_accuracy = self._calculate_signal_accuracy(original_signals)
        filtered_accuracy = self._calculate_signal_accuracy(filtered_signals)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        blocked_signals = (original_signals == 1) & (filtered_signals == 0)
        blocked_count = blocked_signals.sum()
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        blocked_false_positives = blocked_signals & (self.targets['is_event'] == 0)
        blocked_true_positives = blocked_signals & (self.targets['is_event'] == 1)
        
        veto_effectiveness = blocked_false_positives.sum() / max(1, blocked_count)
        
        validation_results = {
            'original_accuracy': original_accuracy,
            'filtered_accuracy': filtered_accuracy,
            'accuracy_improvement': filtered_accuracy - original_accuracy,
            'blocked_signals': int(blocked_count),
            'blocked_false_positives': int(blocked_false_positives.sum()),
            'blocked_true_positives': int(blocked_true_positives.sum()),
            'veto_effectiveness': veto_effectiveness,
            'signal_reduction': blocked_count / max(1, original_signals.sum())
        }
        
        self.veto_rules['validation'] = validation_results
        
        print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {original_accuracy:.3f}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å —Å VETO: {filtered_accuracy:.3f}")
        print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {validation_results['accuracy_improvement']:.3f}")
        print(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {blocked_count}")
        print(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å VETO: {veto_effectiveness:.1%}")
        
        return validation_results
    
    def _create_baseline_signals(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ—Å—Ç–∞—è baseline –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
        signal_strength = pd.Series(0.0, index=self.features.index)
        
        # –°—É–º–º–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        for group_name, group_fields in self.field_groups.items():
            group_activity = self._calculate_group_activity(group_fields)
            signal_strength += group_activity
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        threshold = signal_strength.quantile(0.8)
        baseline_signals = (signal_strength > threshold).astype(int)
        
        return baseline_signals
    
    def _apply_veto_rules(self, signals):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ VETO –ø—Ä–∞–≤–∏–ª –∫ —Å–∏–≥–Ω–∞–ª–∞–º"""
        
        filtered_signals = signals.copy()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è
        for field, rule in self.veto_rules['blocking_fields'].items():
            if field in self.features.columns:
                field_data = pd.to_numeric(self.features[field], errors='coerce').fillna(0)
                blocking_mask = np.abs(field_data) > rule['threshold']
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –ø–æ–ª—è
                filtered_signals[blocking_mask] = 0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        false_fields = list(self.veto_rules['false_signal_filters'].keys())
        
        # –°–Ω–∏–∂–∞–µ–º –≤–µ—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –ø–æ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        for field in false_fields:
            if field in self.features.columns:
                field_data = pd.to_numeric(self.features[field], errors='coerce').fillna(0)
                field_active = np.abs(field_data) > field_data.quantile(0.8)
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—è
                isolated_signals = field_active.astype(int)
                filtered_signals = filtered_signals & ~isolated_signals
        
        return filtered_signals
    
    def _calculate_signal_accuracy(self, signals):
        """–†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if signals.sum() == 0:
            return 0
        
        events = self.targets['is_event']
        correct_signals = (signals == 1) & (events == 1)
        
        accuracy = correct_signals.sum() / signals.sum()
        return accuracy
    
    def apply_veto_to_scoring(self, scoring_features, scoring_weights):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ VETO –ø—Ä–∞–≤–∏–ª –∫ —Å–∏—Å—Ç–µ–º–µ —Å–∫–æ—Ä–∏–Ω–≥–∞
        
        Args:
            scoring_features: —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
            scoring_weights: —Å–ª–æ–≤–∞—Ä—å –≤–µ—Å–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            
        Returns:
            filtered_features, adjusted_weights
        """
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ VETO –ø—Ä–∞–≤–∏–ª –∫ —Å–∫–æ—Ä–∏–Ω–≥—É...")
        
        filtered_features = []
        adjusted_weights = {}
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        for feature in scoring_features:
            base_feature = feature.replace('_activated', '')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è
            if base_feature in self.veto_rules['blocking_fields']:
                print(f"   –ò—Å–∫–ª—é—á–µ–Ω –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ø—Ä–∏–∑–Ω–∞–∫: {feature}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if base_feature in self.veto_rules['false_signal_filters']:
                print(f"   –ò—Å–∫–ª—é—á–µ–Ω –ª–æ–∂–Ω–æ-—Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫: {feature}")
                continue
            
            # –ü—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            filtered_features.append(feature)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            original_weight = scoring_weights.get(feature, 0)
            adjusted_weight = original_weight
            
            # –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
            for conflict_name, conflict_rule in self.veto_rules['conflict_rules'].items():
                if any(group in conflict_name for group in self.field_groups.keys() 
                      if any(field in base_feature for field in self.field_groups[group])):
                    penalty = conflict_rule.get('confidence_penalty', 0)
                    adjusted_weight *= (1 - penalty)
            
            adjusted_weights[feature] = adjusted_weight
        
        print(f"   –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {len(scoring_features)} ‚Üí {len(filtered_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        return filtered_features, adjusted_weights
    
    def save_veto_analysis(self, output_dir="results/veto_system"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ VETO –∞–Ω–∞–ª–∏–∑–∞"""
        
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ VETO –ø—Ä–∞–≤–∏–ª
        with open(output_path / "veto_rules.json", 'w') as f:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è JSON —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            json_rules = {}
            for category, rules in self.veto_rules.items():
                json_rules[category] = {}
                for rule_name, rule_data in rules.items():
                    if isinstance(rule_data, dict):
                        json_rules[category][rule_name] = {
                            k: float(v) if isinstance(v, (np.int64, np.float64)) else v 
                            for k, v in rule_data.items()
                        }
                    else:
                        json_rules[category][rule_name] = rule_data
            
            json.dump(json_rules, f, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π
        if self.blocking_fields:
            blocking_df = pd.DataFrame(self.blocking_fields).T
            blocking_df.to_csv(output_path / "blocking_fields.csv")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if self.conflict_patterns:
            conflict_df = pd.DataFrame(self.conflict_patterns).T
            conflict_df.to_csv(output_path / "conflict_patterns.csv")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self._create_veto_report(output_path)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        self._create_veto_visualizations(output_path)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã VETO –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    
    def _create_veto_report(self, output_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ VETO —Å–∏—Å—Ç–µ–º–µ"""
        
        report_lines = [
            "–°–ò–°–¢–ï–ú–ê –°–¢–û–ü-–ü–û–õ–ï–ô –ò VETO –õ–û–ì–ò–ö–ò - –û–¢–ß–ï–¢",
            "=" * 50,
            f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "–ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–°–¢–ï–ú–´:",
            f"–ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {self.high_volatility_threshold}",
            f"–ü–æ—Ä–æ–≥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {self.conflicting_signals_threshold}",
            f"–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {self.low_confidence_threshold}",
            f"–ú–∏–Ω–∏–º—É–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {self.min_confirming_signals}",
            "",
            "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:",
        ]
        
        # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è
        report_lines.extend([
            f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π: {len(self.blocking_fields)}",
        ])
        
        if self.blocking_fields:
            report_lines.append("–¢–æ–ø –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä—ã:")
            sorted_blockers = sorted(
                self.blocking_fields.items(),
                key=lambda x: x[1]['blocking_strength'],
                reverse=True
            )
            for field, analysis in sorted_blockers[:10]:
                report_lines.append(
                    f"  {field}: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {analysis['blocking_strength']:.3f}, "
                    f"–ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã {analysis['false_positive_rate']:.1%}"
                )
        
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        report_lines.extend([
            "",
            f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(self.conflict_patterns)}",
        ])
        
        if self.conflict_patterns:
            for conflict_name, analysis in self.conflict_patterns.items():
                report_lines.append(
                    f"  {conflict_name}: –∫–æ–Ω—Ñ–ª–∏–∫—Ç {analysis['conflict_strength']:.3f}"
                )
        
        # –õ–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        report_lines.extend([
            "",
            f"–ü–æ–ª—è —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.false_signal_analysis)}",
        ])
        
        if self.false_signal_analysis:
            sorted_false = sorted(
                self.false_signal_analysis.items(),
                key=lambda x: x[1]['false_positive_rate'],
                reverse=True
            )
            for field, analysis in sorted_false[:10]:
                report_lines.append(
                    f"  {field}: –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã {analysis['false_positive_rate']:.1%}"
                )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if 'validation' in self.veto_rules:
            val = self.veto_rules['validation']
            report_lines.extend([
                "",
                "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:",
                f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {val['original_accuracy']:.3f}",
                f"–¢–æ—á–Ω–æ—Å—Ç—å —Å VETO: {val['filtered_accuracy']:.3f}",
                f"–£–ª—É—á—à–µ–Ω–∏–µ: {val['accuracy_improvement']:.3f}",
                f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {val['blocked_signals']}",
                f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å VETO: {val['veto_effectiveness']:.1%}",
            ])
        
        report_lines.extend([
            "",
            "–§–ê–ô–õ–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:",
            "veto_rules.json - –ø—Ä–∞–≤–∏–ª–∞ VETO —Å–∏—Å—Ç–µ–º—ã",
            "blocking_fields.csv - –∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π",
            "conflict_patterns.csv - –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤",
            "veto_effectiveness.png - –≥—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "",
            "=" * 50
        ])
        
        with open(output_path / "veto_analysis_report.txt", 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
    
    def _create_veto_visualizations(self, output_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π VETO —Å–∏—Å—Ç–µ–º—ã"""
        
        plt.style.use('default')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π
        if self.blocking_fields:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
            
            # –°–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            fields = list(self.blocking_fields.keys())[:10]  # –¢–æ–ø 10
            blocking_strengths = [self.blocking_fields[f]['blocking_strength'] for f in fields]
            
            bars1 = ax1.barh(range(len(fields)), blocking_strengths, color='red', alpha=0.7)
            ax1.set_yticks(range(len(fields)))
            ax1.set_yticklabels(fields)
            ax1.set_xlabel('–°–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
            ax1.set_title('–¢–æ–ø –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è')
            ax1.grid(True, alpha=0.3)
            
            # –ß–∞—Å—Ç–æ—Ç–∞ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            false_rates = [self.blocking_fields[f]['false_positive_rate'] for f in fields]
            
            bars2 = ax2.barh(range(len(fields)), false_rates, color='orange', alpha=0.7)
            ax2.set_yticks(range(len(fields)))
            ax2.set_yticklabels(fields)
            ax2.set_xlabel('–ß–∞—Å—Ç–æ—Ç–∞ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤')
            ax2.set_title('–õ–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π')
            ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig(output_path / "blocking_fields_analysis.png", dpi=300, bbox_inches='tight')
            plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å VETO —Å–∏—Å—Ç–µ–º—ã
        if 'validation' in self.veto_rules:
            val = self.veto_rules['validation']
            
            fig, ax = plt.subplots(figsize=(10, 6))
            
            metrics = ['–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å', '–¢–æ—á–Ω–æ—Å—Ç—å —Å VETO']
            values = [val['original_accuracy'], val['filtered_accuracy']]
            colors = ['lightblue', 'lightgreen']
            
            bars = ax.bar(metrics, values, color=colors, alpha=0.8)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height,
                       f'{value:.3f}', ha='center', va='bottom')
            
            ax.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
            ax.set_title('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å VETO —Å–∏—Å—Ç–µ–º—ã')
            ax.set_ylim(0, max(values) * 1.1)
            ax.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
            ax.text(0.5, max(values) * 0.5, 
                   f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {val['blocked_signals']}\n"
                   f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {val['veto_effectiveness']:.1%}",
                   ha='center', va='center', 
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.5))
            
            plt.tight_layout()
            plt.savefig(output_path / "veto_effectiveness.png", dpi=300, bbox_inches='tight')
            plt.close()


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VETO —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–æ–ø-–ø–æ–ª–µ–π –∏ VETO –ª–æ–≥–∏–∫–∏...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    np.random.seed(42)
    n_samples = 500
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    n_features = 50
    X = pd.DataFrame(
        np.random.randn(n_samples, n_features),
        columns=[f'feature_{i}' for i in range(n_features)]
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ "–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö" –ø–æ–ª–µ–π (–∞–Ω—Ç–∏–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å —Å–æ–±—ã—Ç–∏—è–º–∏)
    X['blocker_1'] = np.random.randn(n_samples)
    X['blocker_2'] = np.random.randn(n_samples)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    signal_strength = X[['feature_0', 'feature_1', 'feature_2']].sum(axis=1)
    noise = np.random.randn(n_samples) * 0.5
    
    # –°–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Å–∏–≥–Ω–∞–ª–µ, –Ω–æ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –±–ª–æ–∫–∏—Ä–∞—Ç–æ—Ä–∞–º–∏
    events = (signal_strength + noise > 1.5) & (X['blocker_1'] < 1) & (X['blocker_2'] < 1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª–µ–π
    data = pd.DataFrame({'close': 50000 + np.cumsum(np.random.randn(n_samples))})
    targets = pd.DataFrame({'is_event': events.astype(int)})
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VETO —Å–∏—Å—Ç–µ–º—ã
    veto_system = VetoSystem()
    veto_rules = veto_system.analyze_veto_patterns(data, X, targets)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    veto_system.save_veto_analysis("results/test_veto_system")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VETO —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()