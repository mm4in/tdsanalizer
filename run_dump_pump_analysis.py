#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–º–ø/–ø–∞–º–ø –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from dump_pump_analyzer import DumpPumpAnalyzer

def run_analysis():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –î–ê–ú–ü/–ü–ê–ú–ü –ü–ê–¢–¢–ï–†–ù–û–í")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = DumpPumpAnalyzer()
    
    # –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
    data_file = "data/dslog_btc_0508240229_ltf.txt"
    
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        print("\n1Ô∏è‚É£ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
        data = analyzer.load_and_parse_data(data_file)
        
        # –ü–æ–∫–∞–∂–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –°—Ç–æ–ª–±—Ü–æ–≤: {len(data.columns)}")
        
        # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–π
        indicator_fields = [col for col in data.columns 
                           if not col in ['timestamp', 'open', 'high', 'low', 'close', 'volume', 'range', 
                                        'candle_color', 'candle_type', 'line_number', 'raw_line']]
        print(f"üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ª–µ–π: {len(indicator_fields)}")
        print(f"üìä –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–π: {', '.join(indicator_fields[:10])}")
        
        # 2. –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π
        print("\n2Ô∏è‚É£ –ü–û–ò–°–ö –°–û–ë–´–¢–ò–ô")
        events = analyzer.detect_events()
        
        if not events:
            print("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            return None
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        print("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í")
        patterns = analyzer.analyze_patterns()
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n4Ô∏è‚É£ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        output_path = analyzer.save_results()
        
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        
        return analyzer
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    analyzer = run_analysis()
