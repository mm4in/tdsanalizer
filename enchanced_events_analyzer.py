#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
"""

import pandas as pd
import numpy as np
import json
from pathlib import Path
from datetime import datetime, timedelta

class EnhancedEventsAnalyzer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.events_data = None
        self.price_data = None
        self.field_data = None
        self.practical_events = {}
        
    def load_events_data(self, events_file="results/advanced_events/advanced_events_data.csv"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏—è—Ö"""
        try:
            self.events_data = pd.read_csv(events_file)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(self.events_data)}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return False
    
    def analyze_practical_events(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è"""
        if self.events_data is None:
            return None
        
        print("üéØ –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è...")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        event_types = [
            'retracement_2_3pct', 'retracement_3_5pct', 'retracement_5_7pct',
            'retracement_7_10pct', 'retracement_10pct_plus',
            'culmination', 'continuation', 'consolidation', 'transition_zone'
        ]
        
        for event_type in event_types:
            if event_type in self.events_data.columns:
                analysis = self._analyze_event_type(event_type)
                self.practical_events[event_type] = analysis
        
        return self.practical_events
    
    def _analyze_event_type(self, event_type):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        event_mask = self.events_data[event_type] == 1
        event_indices = self.events_data[event_mask].index.tolist()
        
        if len(event_indices) == 0:
            return {
                'count': 0,
                'frequency': 0,
                'description': '–°–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
                'practical_meaning': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        count = len(event_indices)
        frequency = count / len(self.events_data) * 100
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è
        context_analysis = self._analyze_event_context(event_indices, event_type)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        timing_analysis = self._analyze_event_timing(event_indices)
        
        # –¶–µ–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
        price_analysis = self._analyze_price_movements(event_indices)
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        practical_meaning = self._get_practical_meaning(event_type, context_analysis, price_analysis)
        
        return {
            'count': count,
            'frequency': frequency,
            'description': self._get_event_description(event_type),
            'practical_meaning': practical_meaning,
            'context': context_analysis,
            'timing': timing_analysis,
            'price_movements': price_analysis,
            'trading_signals': self._generate_trading_signals(event_type, context_analysis)
        }
    
    def _analyze_event_context(self, event_indices, event_type):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è (–ø–æ–ª—è, –∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –º–æ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è)"""
        if len(event_indices) == 0:
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–º–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏–π
        event_data = self.events_data.iloc[event_indices]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
        active_fields = {}
        field_columns = [col for col in self.events_data.columns 
                        if col not in ['open', 'high', 'low', 'close', 'volume', 'range', 
                                     'price_change', 'completion', 'movement_24h'] 
                        and not col.startswith('retracement_') 
                        and col not in ['culmination', 'continuation', 'consolidation', 'transition_zone']]
        
        for field in field_columns:
            if field in event_data.columns:
                field_values = pd.to_numeric(event_data[field], errors='coerce').fillna(0)
                non_zero_values = field_values[field_values != 0]
                
                if len(non_zero_values) > 0:
                    active_fields[field] = {
                        'activation_rate': len(non_zero_values) / len(event_indices),
                        'avg_value': non_zero_values.mean(),
                        'max_value': non_zero_values.max(),
                        'min_value': non_zero_values.min()
                    }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        sorted_fields = sorted(active_fields.items(), 
                             key=lambda x: x[1]['activation_rate'], 
                             reverse=True)
        
        return {
            'most_active_fields': dict(sorted_fields[:10]),
            'total_active_fields': len(active_fields),
            'avg_field_activity': np.mean([info['activation_rate'] for info in active_fields.values()]) if active_fields else 0
        }
    
    def _analyze_event_timing(self, event_indices):
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–æ–±—ã—Ç–∏–π"""
        if len(event_indices) < 2:
            return {}
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
        intervals = []
        for i in range(1, len(event_indices)):
            interval = event_indices[i] - event_indices[i-1]
            intervals.append(interval)
        
        if intervals:
            return {
                'avg_interval': np.mean(intervals),
                'min_interval': np.min(intervals),
                'max_interval': np.max(intervals),
                'std_interval': np.std(intervals),
                'typical_duration': f"{np.mean(intervals):.1f} –ø–µ—Ä–∏–æ–¥–æ–≤"
            }
        
        return {}
    
    def _analyze_price_movements(self, event_indices):
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏–π"""
        if len(event_indices) == 0:
            return {}
        
        event_data = self.events_data.iloc[event_indices]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        price_columns = ['open', 'high', 'low', 'close', 'price_change']
        available_columns = [col for col in price_columns if col in event_data.columns]
        
        if not available_columns:
            return {'error': '–¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
        
        analysis = {}
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã
        if 'price_change' in event_data.columns:
            price_changes = pd.to_numeric(event_data['price_change'], errors='coerce').fillna(0)
            analysis['price_change'] = {
                'avg': price_changes.mean(),
                'positive_events': (price_changes > 0).sum(),
                'negative_events': (price_changes < 0).sum(),
                'neutral_events': (price_changes == 0).sum(),
                'max_gain': price_changes.max(),
                'max_loss': price_changes.min()
            }
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if all(col in event_data.columns for col in ['high', 'low', 'close']):
            highs = pd.to_numeric(event_data['high'], errors='coerce').fillna(0)
            lows = pd.to_numeric(event_data['low'], errors='coerce').fillna(0)
            closes = pd.to_numeric(event_data['close'], errors='coerce').fillna(0)
            
            # –†–∞—Å—á–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            ranges = ((highs - lows) / closes * 100).replace([np.inf, -np.inf], 0)
            
            analysis['volatility'] = {
                'avg_range_pct': ranges.mean(),
                'max_range_pct': ranges.max(),
                'high_volatility_events': (ranges > ranges.quantile(0.8)).sum()
            }
        
        return analysis
    
    def _get_event_description(self, event_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        descriptions = {
            'retracement_2_3pct': '–ù–µ–±–æ–ª—å—à–æ–π –æ—Ç–∫–∞—Ç 2-3% - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è',
            'retracement_3_5pct': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç 3-5% - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞',
            'retracement_5_7pct': '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç 5-7% - —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è',
            'retracement_7_10pct': '–ì–ª—É–±–æ–∫–∏–π –æ—Ç–∫–∞—Ç 7-10% - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
            'retracement_10pct_plus': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç 10%+ - –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç',
            'culmination': '–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è - —Ç–æ—á–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞',
            'continuation': '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ - –ø—Ä–æ–±–æ–π –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è',
            'consolidation': '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è - –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ',
            'transition_zone': '–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        }
        
        return descriptions.get(event_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è')
    
    def _get_practical_meaning(self, event_type, context, price_analysis):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        meanings = {
            'retracement_2_3pct': '–•–æ—Ä–æ—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–¥—É',
            'retracement_3_5pct': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞',
            'retracement_5_7pct': '–ì–ª—É–±–æ–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è - –≤—Ö–æ–¥–∏—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é',
            'retracement_7_10pct': '–í–æ–∑–º–æ–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ - —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'retracement_10pct_plus': '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞',
            'culmination': '–û–∂–∏–¥–∞—Ç—å —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è',
            'continuation': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ - –º–æ–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å',
            'consolidation': '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–±–æ—è - –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é',
            'transition_zone': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å - –ª—É—á—à–µ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω–µ'
        }
        
        base_meaning = meanings.get(event_type, '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if context and 'most_active_fields' in context:
            top_fields = list(context['most_active_fields'].keys())[:3]
            if top_fields:
                base_meaning += f" (–∞–∫—Ç–∏–≤–Ω—ã: {', '.join(top_fields)})"
        
        return base_meaning
    
    def _generate_trading_signals(self, event_type, context):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        signals = {
            'retracement_2_3pct': {
                'action': 'BUY_DIP',
                'confidence': 'HIGH',
                'risk': 'LOW',
                'comment': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–¥—É'
            },
            'retracement_3_5pct': {
                'action': 'BUY_PULLBACK',
                'confidence': 'HIGH',
                'risk': 'MEDIUM',
                'comment': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏'
            },
            'retracement_5_7pct': {
                'action': 'WAIT_CONFIRMATION',
                'confidence': 'MEDIUM',
                'risk': 'MEDIUM',
                'comment': '–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞'
            },
            'retracement_7_10pct': {
                'action': 'CAUTIOUS_ENTRY',
                'confidence': 'LOW',
                'risk': 'HIGH',
                'comment': '–í–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç - –º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏'
            },
            'retracement_10pct_plus': {
                'action': 'REVERSE_SIGNAL',
                'confidence': 'MEDIUM',
                'risk': 'HIGH',
                'comment': '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            },
            'culmination': {
                'action': 'PREPARE_REVERSE',
                'confidence': 'HIGH',
                'risk': 'MEDIUM',
                'comment': '–ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç—É —Ç—Ä–µ–Ω–¥–∞'
            },
            'continuation': {
                'action': 'FOLLOW_TREND',
                'confidence': 'HIGH',
                'risk': 'LOW',
                'comment': '–°–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ–±–æ—é –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞'
            },
            'consolidation': {
                'action': 'WAIT_BREAKOUT',
                'confidence': 'MEDIUM',
                'risk': 'MEDIUM',
                'comment': '–û–∂–∏–¥–∞—Ç—å –ø—Ä–æ–±–æ—è –≥—Ä–∞–Ω–∏—Ü –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏'
            },
            'transition_zone': {
                'action': 'STAY_ASIDE',
                'confidence': 'LOW',
                'risk': 'HIGH',
                'comment': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å - –ª—É—á—à–µ –Ω–∞–±–ª—é–¥–∞—Ç—å'
            }
        }
        
        return signals.get(event_type, {
            'action': 'ANALYZE_FURTHER',
            'confidence': 'LOW',
            'risk': 'UNKNOWN',
            'comment': '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
        })
    
    def create_practical_events_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º"""
        if not self.practical_events:
            return None
        
        report_lines = [
            "üìà –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –°–û–ë–´–¢–ò–ô",
            "=" * 60,
            f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            "",
            "üéØ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:"
        ]
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        total_events = sum(event['count'] for event in self.practical_events.values())
        report_lines.extend([
            f"   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_events}",
            f"   –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {len(self.practical_events)}",
            ""
        ])
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        for event_type, analysis in self.practical_events.items():
            if analysis['count'] == 0:
                continue
                
            report_lines.extend([
                f"üìä {analysis['description'].upper()}",
                "-" * 40,
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {analysis['count']} ({analysis['frequency']:.1f}%)",
                f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {analysis['practical_meaning']}",
            ])
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if 'trading_signals' in analysis:
                signals = analysis['trading_signals']
                report_lines.extend([
                    f"–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signals['action']}",
                    f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signals['confidence']}",
                    f"–†–∏—Å–∫: {signals['risk']}",
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {signals['comment']}"
                ])
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
            if 'context' in analysis and 'most_active_fields' in analysis['context']:
                active_fields = analysis['context']['most_active_fields']
                if active_fields:
                    top_3_fields = list(active_fields.keys())[:3]
                    report_lines.append(f"–ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(top_3_fields)}")
            
            # –¶–µ–Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if 'price_movements' in analysis and 'price_change' in analysis['price_movements']:
                price_data = analysis['price_movements']['price_change']
                report_lines.extend([
                    f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_data['avg']:.2f}%",
                    f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {price_data['positive_events']}",
                    f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {price_data['negative_events']}"
                ])
            
            report_lines.append("")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report_lines.extend([
            "üí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:",
            "1. –û—Ç–∫–∞—Ç—ã 2-5% - —Ö–æ—Ä–æ—à–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É",
            "2. –û—Ç–∫–∞—Ç—ã 7%+ - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç",
            "3. –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ - –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–±–æ—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", 
            "4. –ö—É–ª—å–º–∏–Ω–∞—Ü–∏–∏ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞",
            "5. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "",
            "‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:",
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É",
            "- –í—Å–µ–≥–¥–∞ —Å—Ç–∞–≤—å—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã",
            "- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–±—â–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
            "- –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
            "",
            "=" * 60
        ])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        output_file = Path("results") / "–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô_–ê–ù–ê–õ–ò–ó_–°–û–ë–´–¢–ò–ô.txt"
        output_file.parent.mkdir(exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
        
        print(f"üìã –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
        return '\n'.join(report_lines)
    
    def create_events_summary_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π"""
        if not self.practical_events:
            return None
        
        summary_data = []
        
        for event_type, analysis in self.practical_events.items():
            if analysis['count'] == 0:
                continue
            
            signals = analysis.get('trading_signals', {})
            
            summary_data.append({
                '–°–æ–±—ã—Ç–∏–µ': analysis['description'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': analysis['count'],
                '–ß–∞—Å—Ç–æ—Ç–∞_%': f"{analysis['frequency']:.1f}%",
                '–¢–æ—Ä–≥–æ–≤—ã–π_—Å–∏–≥–Ω–∞–ª': signals.get('action', 'N/A'),
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': signals.get('confidence', 'N/A'),
                '–†–∏—Å–∫': signals.get('risk', 'N/A'),
                '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ': analysis['practical_meaning'][:50] + '...' if len(analysis['practical_meaning']) > 50 else analysis['practical_meaning']
            })
        
        if summary_data:
            summary_df = pd.DataFrame(summary_data)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            output_file = Path("results") / "events_summary_table.csv"
            summary_df.to_csv(output_file, index=False, encoding='utf-8')
            
            print(f"üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_file}")
            return summary_df
        
        return None


def main():
    """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—ã—Ç–∏–π"""
    analyzer = EnhancedEventsAnalyzer()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not analyzer.load_events_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π")
        return
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
    practical_events = analyzer.analyze_practical_events()
    
    if practical_events:
        print("‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        analyzer.create_practical_events_report()
        analyzer.create_events_summary_table()
        
        print("\nüìã –°–æ–∑–¥–∞–Ω–æ:")
        print("   - –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô_–ê–ù–ê–õ–ò–ó_–°–û–ë–´–¢–ò–ô.txt")
        print("   - events_summary_table.csv")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π")


if __name__ == "__main__":
    main()