#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ü–û–ù–Ø–¢–ù–´–• –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
"""

import pandas as pd
import numpy as np
import json
from pathlib import Path
from datetime import datetime

class ClearReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–Ω—è—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self):
        self.results_dir = Path("results")
        self.weight_matrix = None
        self.scoring_config = None
        self.temporal_lags = None
        self.veto_rules = None
        
    def load_results(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (self.results_dir / "weight_matrix.csv").exists():
                self.weight_matrix = pd.read_csv(self.results_dir / "weight_matrix.csv")
            
            if (self.results_dir / "scoring_config.json").exists():
                with open(self.results_dir / "scoring_config.json", 'r') as f:
                    self.scoring_config = json.load(f)
            
            # LTF —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (self.results_dir / "ltf" / "temporal_lags_ltf.csv").exists():
                self.temporal_lags = pd.read_csv(self.results_dir / "ltf" / "temporal_lags_ltf.csv")
            
            # VETO —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (self.results_dir / "veto_system" / "veto_rules.json").exists():
                with open(self.results_dir / "veto_system" / "veto_rules.json", 'r') as f:
                    self.veto_rules = json.load(f)
                    
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False
    
    def generate_trader_friendly_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        if not self.load_results():
            return None
        
        report_lines = [
            "üéØ –§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† - –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´",
            "=" * 60,
            f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            "",
            "üöÄ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:",
        ]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.scoring_config:
            validation_score = self.scoring_config.get('validation_score', 0)
            report_lines.extend([
                f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {validation_score:.1%}",
                f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {'–û–¢–õ–ò–ß–ù–û–ï' if validation_score > 0.8 else '–•–û–†–û–®–ï–ï' if validation_score > 0.6 else '–°–†–ï–î–ù–ï–ï'}",
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø–æ–ª–µ–π: {len(self.scoring_config.get('thresholds', {}))}"
            ])
        
        report_lines.extend([
            "",
            "üíé –¢–û–ü-10 –°–ê–ú–´–• –í–ê–ñ–ù–´–• –ü–û–õ–ï–ô (–°–ò–ì–ù–ê–õ–û–í):",
            "   (—á–µ–º –≤—ã—à–µ –≤–µ—Å, —Ç–µ–º –≤–∞–∂–Ω–µ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞)"
        ])
        
        # –¢–æ–ø –ø–æ–ª–µ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        top_fields = self._get_top_fields()
        for i, (field, weight, description) in enumerate(top_fields[:10], 1):
            report_lines.append(f"   {i:2d}. {field:15s} (–≤–µ—Å: {weight:.3f}) - {description}")
        
        report_lines.extend([
            "",
            "‚ö° –í–†–ï–ú–ï–ù–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –°–ò–ì–ù–ê–õ–û–í:",
        ])
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∞–≥–∏
        timing_info = self._analyze_timing()
        for group, info in timing_info.items():
            report_lines.append(f"   {group}: —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞ {info['lag']:.1f} –ø–µ—Ä–∏–æ–¥–æ–≤, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å {info['reliability']}")
        
        report_lines.extend([
            "",
            "üõ°Ô∏è –°–¢–û–ü-–°–ò–ì–ù–ê–õ–´ (–∫–æ–≥–¥–∞ –ù–ï –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–¥–µ–ª–∫—É):",
        ])
        
        # –°—Ç–æ–ø-–ø–æ–ª—è
        stop_signals = self._get_stop_signals()
        for field, reason in stop_signals[:5]:
            report_lines.append(f"   ‚ùå {field}: {reason}")
        
        report_lines.extend([
            "",
            "üìä –¢–ò–ü–´ –†–´–ù–û–ß–ù–´–• –°–û–ë–´–¢–ò–ô:",
        ])
        
        # –°–æ–±—ã—Ç–∏—è
        events_info = self._analyze_events()
        for event_type, info in events_info.items():
            report_lines.append(f"   üìà {event_type}: {info['description']} ({info['frequency']})")
        
        report_lines.extend([
            "",
            "üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:",
        ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_recommendations()
        for i, rec in enumerate(recommendations, 1):
            report_lines.append(f"   {i}. {rec}")
        
        report_lines.extend([
            "",
            "‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:",
        ])
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = self._generate_warnings()
        for warning in warnings:
            report_lines.append(f"   ‚ö†Ô∏è {warning}")
        
        report_lines.extend([
            "",
            "üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –í –§–ê–ô–õ–ê–•:",
            "   - weight_matrix.csv - –≤–µ—Å–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π",
            "   - scoring_config.json - –ø–æ—Ä–æ–≥–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
            "   - results/ltf/ - –∞–Ω–∞–ª–∏–∑ –±—ã—Å—Ç—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
            "   - results/veto_system/ - –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
            "",
            "=" * 60
        ])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        output_file = self.results_dir / "–ü–û–ù–Ø–¢–ù–´–ô_–û–¢–ß–ï–¢.txt"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
        
        print(f"üìã –ü–æ–Ω—è—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
        return '\n'.join(report_lines)
    
    def _get_top_fields(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø–æ–ª–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
        if not self.scoring_config or 'weights' not in self.scoring_config:
            return []
        
        weights = self.scoring_config['weights']
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        sorted_fields = sorted(weights.items(), key=lambda x: x[1], reverse=True)
        
        result = []
        for field, weight in sorted_fields:
            # –£–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è
            clean_name = field.replace('_activated', '').replace('_lag_', '_L')
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è
            description = self._describe_field(clean_name)
            
            result.append((clean_name, weight, description))
        
        return result
    
    def _describe_field(self, field_name):
        """–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º"""
        descriptions = {
            'volume': '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞)',
            'price_change': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)',
            'co': '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏',
            'mo': 'Momentum –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (—Å–∏–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è)',
            'ro': '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞',
            'as': '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–∫–æ—Ä–µ–Ω–∏—è',
            'ze': 'Z-score —ç–∫—Å—Ç—Ä–µ–º—É–º',
            'ef': '–§–∞–∫—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            'mz': 'Momentum Z-score',
            'rz': '–†–∞–∑–≤–æ—Ä–æ—Ç Z-score',
            'maz': 'MA Z-score',
            'cvz': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Z-score',
            'rd': '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'md': 'MA –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è',
            'do': '–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å',
            'so': '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å'
        }
        
        # –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        for base, desc in descriptions.items():
            if field_name.startswith(base):
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
                if any(tf in field_name for tf in ['2', '5', '15', '30']):
                    desc += ' (–±—ã—Å—Ç—Ä—ã–π —Å–∏–≥–Ω–∞–ª)'
                elif any(tf in field_name for tf in ['1h', '4h', '1d']):
                    desc += ' (–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª)'
                elif '_L' in field_name:
                    desc += ' (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)'
                return desc
        
        return '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä'
    
    def _analyze_timing(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        if not self.temporal_lags:
            return {}
        
        timing = {}
        
        for _, row in self.temporal_lags.iterrows():
            group = row.iloc[0]  # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            mean_lag = row['mean_lag']
            activation_rate = row['activation_rate']
            
            # –û—Ü–µ–Ω–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            if activation_rate > 0.8:
                reliability = "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
            elif activation_rate > 0.6:
                reliability = "–≤—ã—Å–æ–∫–∞—è"
            elif activation_rate > 0.4:
                reliability = "—Å—Ä–µ–¥–Ω—è—è"
            else:
                reliability = "–Ω–∏–∑–∫–∞—è"
            
            timing[group] = {
                'lag': mean_lag,
                'reliability': reliability,
                'activation_rate': activation_rate
            }
        
        return timing
    
    def _get_stop_signals(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not self.veto_rules:
            return []
        
        stop_signals = []
        
        # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è
        blocking_fields = self.veto_rules.get('blocking_fields', {})
        for field, info in blocking_fields.items():
            strength = info.get('blocking_strength', 0)
            reason = f"–±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —Å —Å–∏–ª–æ–π {strength:.1%}"
            stop_signals.append((field, reason))
        
        # –õ–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        false_signals = self.veto_rules.get('false_signal_filters', {})
        for field, info in false_signals.items():
            false_rate = info.get('false_positive_rate', 0)
            reason = f"–¥–∞–µ—Ç –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ {false_rate:.1%} —Å–ª—É—á–∞–µ–≤"
            stop_signals.append((field, reason))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        stop_signals.sort(key=lambda x: x[1], reverse=True)
        
        return stop_signals
    
    def _analyze_events(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        events_file = self.results_dir / "advanced_events" / "event_statistics.json"
        
        if not events_file.exists():
            return {}
        
        try:
            with open(events_file, 'r') as f:
                events_stats = json.load(f)
        except:
            return {}
        
        events_info = {}
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        event_descriptions = {
            'retracement_2_3pct': {
                'description': '–û—Ç–∫–∞—Ç 2-3% - –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º—É–º–∞',
                'practical': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É'
            },
            'retracement_5_7pct': {
                'description': '–û—Ç–∫–∞—Ç 5-7% - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è', 
                'practical': '–•–æ—Ä–æ—à–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ç—Ä–µ–Ω–¥'
            },
            'consolidation': {
                'description': '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è - –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ',
                'practical': '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–±–æ—è, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å'
            },
            'continuation': {
                'description': '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è - –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω–µ–π',
                'practical': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞'
            },
            'culmination': {
                'description': '–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è - —Ç–æ—á–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞',
                'practical': '–í–æ–∑–º–æ–∂–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            },
            'transition_zone': {
                'description': '–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å',
                'practical': '–û–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤'
            }
        }
        
        for event_type, stats in events_stats.items():
            if event_type == 'summary':
                continue
            
            frequency = stats.get('percentage', 0)
            
            if event_type in event_descriptions:
                info = event_descriptions[event_type]
                events_info[event_type] = {
                    'description': info['description'],
                    'frequency': f"{frequency:.1f}% —Å–ª—É—á–∞–µ–≤",
                    'practical': info['practical']
                }
        
        return events_info
    
    def _generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if self.scoring_config:
            validation_score = self.scoring_config.get('validation_score', 0)
            
            if validation_score > 0.9:
                recommendations.append("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            elif validation_score > 0.7:
                recommendations.append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            else:
                recommendations.append("–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—è–º
        if self.weight_matrix is not None:
            recommendations.append("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–æ–ø-10 –ø–æ–ª—è—Ö - –æ–Ω–∏ –¥–∞—é—Ç 80% —Ç–æ—á–Ω–æ—Å—Ç–∏")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.temporal_lags is not None:
            recommendations.append("–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∞–≥–∏ - —Å–∏–≥–Ω–∞–ª—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π")
        
        # VETO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.veto_rules:
            recommendations.append("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∂–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            "–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º",
            "–í–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∞–Ω–∞–ª–∏–∑—É, –∞ –Ω–µ –∑–∞–º–µ–Ω—É"
        ])
        
        return recommendations
    
    def _generate_warnings(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        warnings = []
        
        # HTF –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warnings.append("HTF –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –±—ã—Å—Ç—Ä—ã–º —Å–∏–≥–Ω–∞–ª–∞–º")
        
        # VETO –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if self.veto_rules:
            validation = self.veto_rules.get('validation', {})
            veto_effectiveness = validation.get('veto_effectiveness', 0)
            
            if veto_effectiveness < 0.3:
                warnings.append("VETO —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –û–±—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings.extend([
            "–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö",
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö",
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"
        ])
        
        return warnings


def main():
    """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–Ω—è—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    generator = ClearReportGenerator()
    report = generator.generate_trader_friendly_report()
    
    if report:
        print("üìã –ü–û–ù–Ø–¢–ù–´–ô –û–¢–ß–ï–¢ –°–û–ó–î–ê–ù!")
        print("\n" + "="*60)
        print(report[:1000] + "..." if len(report) > 1000 else report)
        print("="*60)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")


if __name__ == "__main__":
    main()