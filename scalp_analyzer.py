#!/usr/bin/env python3
"""
–ü–†–û–°–¢–û–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–û–ù–¢–†–¢–†–ï–ù–î–û–í–û–ì–û –°–ö–ê–õ–¨–ü–ê
–ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è:
1. –õ–û–ò —Å –æ—Ç–∫–∞—Ç–∞–º–∏ –í–í–ï–†–• 3%+ (–¥–∞–º–ø ‚Üí –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥ –ø–æ–∫—É–ø–∫–∞)
2. –•–ê–ò —Å –æ—Ç–∫–∞—Ç–∞–º–∏ –í–ù–ò–ó 3%+ (–ø–∞–º–ø ‚Üí –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂–∞)
3. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∞–º–ø–∞/–ø–∞–º–ø–∞ (–±–µ–∑ –æ—Ç–∫–∞—Ç–æ–≤)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from advanced_log_parser import AdvancedLogParser
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

class ScalpAnalyzer:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Å–∫–∞–ª—å–ø–∞"""
    
    def __init__(self):
        self.parser = AdvancedLogParser()
        self.df = None
        self.events = []
        
    def analyze_log(self, log_file: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–∞"""
        print("üöÄ –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–†–¢–†–ï–ù–î–û–í–û–ì–û –°–ö–ê–õ–¨–ü–ê")
        print("=" * 50)
        
        # 1. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        print("\n1Ô∏è‚É£ –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–•...")
        self.df = self.parser.parse_log_file(log_file)
        
        if self.df.empty:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã!")
            return
        
        # 2. –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è
        print("\n2Ô∏è‚É£ –ü–û–ò–°–ö –°–û–ë–´–¢–ò–ô...")
        self.find_events()
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        print("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í...")
        self.analyze_patterns()
        
        # 4. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        print("\n4Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê...")
        self.create_simple_report()
        
    def find_events(self):
        """–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π: –ª–æ–∏/—Ö–∞–∏ —Å –æ—Ç–∫–∞—Ç–∞–º–∏ vs –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
        window = 10  # –æ–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        
        self.df['is_local_low'] = (
            (self.df['low'] == self.df['low'].rolling(window=window, center=True).min()) &
            (self.df['low'].shift(1) > self.df['low']) &
            (self.df['low'].shift(-1) > self.df['low'])
        )
        
        self.df['is_local_high'] = (
            (self.df['high'] == self.df['high'].rolling(window=window, center=True).max()) &
            (self.df['high'].shift(1) < self.df['high']) &
            (self.df['high'].shift(-1) < self.df['high'])
        )
        
        # –ò—â–µ–º –æ—Ç–∫–∞—Ç—ã –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        events = []
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∏ —Å –æ—Ç–∫–∞—Ç–∞–º–∏ –≤–≤–µ—Ä—Ö
        local_lows = self.df[self.df['is_local_low']].copy()
        
        for idx, low_candle in local_lows.iterrows():
            # –ò—â–µ–º –æ—Ç–∫–∞—Ç –≤–≤–µ—Ä—Ö –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 30 —Å–≤–µ—á–∞—Ö
            future_data = self.df.loc[idx:idx+30]
            if len(future_data) < 10:
                continue
                
            max_price_after = future_data['high'].max()
            rebound_pct = ((max_price_after - low_candle['low']) / low_candle['low']) * 100
            
            if rebound_pct >= 3.0:  # –û—Ç–∫–∞—Ç –≤–≤–µ—Ä—Ö 3%+
                events.append({
                    'type': '–õ–û–ô_–ö–û–ù–¢–†–¢–†–ï–ù–î',
                    'timestamp': low_candle['timestamp'],
                    'price': low_candle['low'],
                    'rebound_pct': rebound_pct,
                    'line_number': idx
                })
            elif rebound_pct < 1.0:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∞–º–ø–∞
                events.append({
                    'type': '–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï_–î–ê–ú–ü–ê',
                    'timestamp': low_candle['timestamp'],
                    'price': low_candle['low'],
                    'rebound_pct': rebound_pct,
                    'line_number': idx
                })
        
        # –ù–∞—Ö–æ–¥–∏–º —Ö–∞–∏ —Å –æ—Ç–∫–∞—Ç–∞–º–∏ –≤–Ω–∏–∑
        local_highs = self.df[self.df['is_local_high']].copy()
        
        for idx, high_candle in local_highs.iterrows():
            # –ò—â–µ–º –æ—Ç–∫–∞—Ç –≤–Ω–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 30 —Å–≤–µ—á–∞—Ö
            future_data = self.df.loc[idx:idx+30]
            if len(future_data) < 10:
                continue
                
            min_price_after = future_data['low'].min()
            pullback_pct = ((high_candle['high'] - min_price_after) / high_candle['high']) * 100
            
            if pullback_pct >= 3.0:  # –û—Ç–∫–∞—Ç –≤–Ω–∏–∑ 3%+
                events.append({
                    'type': '–•–ê–ô_–ö–û–ù–¢–†–¢–†–ï–ù–î',
                    'timestamp': high_candle['timestamp'],
                    'price': high_candle['high'],
                    'pullback_pct': pullback_pct,
                    'line_number': idx
                })
            elif pullback_pct < 1.0:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞–º–ø–∞
                events.append({
                    'type': '–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï_–ü–ê–ú–ü–ê',
                    'timestamp': high_candle['timestamp'],
                    'price': high_candle['high'],
                    'pullback_pct': pullback_pct,
                    'line_number': idx
                })
        
        self.events = events
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
        event_counts = {}
        for event in events:
            event_type = event['type']
            event_counts[event_type] = event_counts.get(event_type, 0) + 1
        
        print("üìä –ù–ê–ô–î–ï–ù–ù–´–ï –°–û–ë–´–¢–ò–Ø:")
        for event_type, count in event_counts.items():
            print(f"   {event_type}: {count} —Å–æ–±—ã—Ç–∏–π")
        
        print(f"   –í–°–ï–ì–û: {len(events)} —Å–æ–±—ã—Ç–∏–π")
    
    def analyze_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–±—ã—Ç–∏—è–º–∏"""
        
        if not self.events:
            print("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        key_indicators = ['nw2', 'ef2', 'as2', 'vc2', 'ze2', 'co2', 'ro2', 'so2']
        
        patterns = {}
        
        for event in self.events:
            event_type = event['type']
            line_num = event['line_number']
            
            if event_type not in patterns:
                patterns[event_type] = {indicator: [] for indicator in key_indicators}
            
            # –°–º–æ—Ç—Ä–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞ 5 —Å–≤–µ—á–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
            start_idx = max(0, line_num - 5)
            end_idx = line_num
            
            event_data = self.df.iloc[start_idx:end_idx]
            
            for indicator in key_indicators:
                if indicator in self.df.columns:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    values = event_data[indicator].dropna()
                    if len(values) > 0:
                        last_value = values.iloc[-1]
                        patterns[event_type][indicator].append(last_value)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        self.pattern_stats = {}
        
        for event_type, indicators in patterns.items():
            self.pattern_stats[event_type] = {}
            
            for indicator, values in indicators.items():
                if values:
                    self.pattern_stats[event_type][indicator] = {
                        'count': len(values),
                        'mean': np.mean(values),
                        'min': np.min(values),
                        'max': np.max(values),
                        'std': np.std(values) if len(values) > 1 else 0
                    }
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def create_simple_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
        
        print("\nüìã –ü–†–û–°–¢–´–ï –¢–ê–ë–õ–ò–¶–´ '–ò–ù–î–ò–ö–ê–¢–û–† ‚Üí –¢–ò–ü –°–û–ë–´–¢–ò–Ø':")
        print("=" * 60)
        
        if not hasattr(self, 'pattern_stats') or not self.pattern_stats:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
        event_types = list(self.pattern_stats.keys())
        indicators = ['nw2', 'ef2', 'as2', 'vc2', 'ze2', 'co2', 'ro2', 'so2']
        
        print(f"\nüéØ –°–†–ï–î–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
        print(f"{'–ò–ù–î–ò–ö–ê–¢–û–†':<10} | ", end="")
        for event_type in event_types:
            print(f"{event_type[:15]:<15} | ", end="")
        print()
        print("-" * (10 + 17 * len(event_types)))
        
        for indicator in indicators:
            print(f"{indicator:<10} | ", end="")
            
            for event_type in event_types:
                if (event_type in self.pattern_stats and 
                    indicator in self.pattern_stats[event_type]):
                    
                    mean_val = self.pattern_stats[event_type][indicator]['mean']
                    count = self.pattern_stats[event_type][indicator]['count']
                    print(f"{mean_val:>6.2f}({count:>2})<7 | ", end="")
                else:
                    print(f"{'N/A':>13} | ", end="")
            print()
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö VETO –ø–æ–ª–µ–π
        print(f"\nüö´ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï VETO –ü–û–õ–Ø:")
        
        # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        veto_candidates = []
        
        for indicator in indicators:
            values_by_type = {}
            
            for event_type in event_types:
                if (event_type in self.pattern_stats and 
                    indicator in self.pattern_stats[event_type]):
                    values_by_type[event_type] = self.pattern_stats[event_type][indicator]['mean']
            
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
            if len(values_by_type) >= 2:
                values = list(values_by_type.values())
                value_range = max(values) - min(values)
                
                if value_range > 2.0:  # –ü–æ—Ä–æ–≥ —Ä–∞–∑–ª–∏—á–∏—è
                    veto_candidates.append({
                        'indicator': indicator,
                        'range': value_range,
                        'values': values_by_type
                    })
        
        if veto_candidates:
            for candidate in sorted(veto_candidates, key=lambda x: x['range'], reverse=True):
                print(f"   {candidate['indicator']}: –¥–∏–∞–ø–∞–∑–æ–Ω {candidate['range']:.2f}")
                for event_type, value in candidate['values'].items():
                    print(f"      {event_type}: {value:.2f}")
        else:
            print("   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ VETO –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = "scalp_analysis_report.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ü–û –ö–û–ù–¢–†–¢–†–ï–ù–î–û–í–û–ú–£ –°–ö–ê–õ–¨–ü–£\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("–°–û–ë–´–¢–ò–Ø:\n")
            for event in self.events[:20]:  # –ü–µ—Ä–≤—ã–µ 20 —Å–æ–±—ã—Ç–∏–π
                f.write(f"{event['type']}: {event['timestamp']} | {event['price']:.2f}\n")
            
            f.write(f"\n–í–°–ï–ì–û –°–û–ë–´–¢–ò–ô: {len(self.events)}\n")
            
            f.write("\n–ü–ê–¢–¢–ï–†–ù–´ –ò–ù–î–ò–ö–ê–¢–û–†–û–í:\n")
            for event_type, indicators in self.pattern_stats.items():
                f.write(f"\n{event_type}:\n")
                for indicator, stats in indicators.items():
                    f.write(f"  {indicator}: mean={stats['mean']:.2f}, count={stats['count']}\n")
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç—å –∫ –ª–æ–≥—É
    log_file = "C:/Users/maksi/Documents/Claude fs/financial_analyzer/data/dslog_btc_0508240229_ltf.txt"
    
    if not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    analyzer = ScalpAnalyzer()
    analyzer.analyze_log(log_file)

if __name__ == "__main__":
    main()
