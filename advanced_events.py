#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
–ù–æ–≤—ã–µ —Ç–∏–ø—ã: –æ—Ç–∫–∞—Ç—ã 2-3%, 3-5%, 5-7%, 7-10%, 10%+, –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏, –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏

Data-driven –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –∞–ø—Ä–∏–æ—Ä–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import yaml
import json
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

from sklearn.cluster import KMeans
from scipy.signal import argrelextrema


class AdvancedEventDetector:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π —Å –Ω–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏
    
    –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:
    1. –û—Ç–∫–∞—Ç—ã: 2-3%, 3-5%, 5-7%, 7-10%, 10%+ (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—è)
    2. –ö—É–ª—å–º–∏–Ω–∞—Ü–∏–∏: –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º
    3. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ/–†–∞–∑–≤–∏—Ç–∏–µ: –ø—Ä–æ–±–æ–∏ —É—Ä–æ–≤–Ω–µ–π, —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç—Ä–µ–Ω–¥–∞  
    4. –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: –±–æ–∫–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, —Ñ–ª–µ—Ç—ã
    5. –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã: –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏
    """
    
    def __init__(self, config_path="config.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
        self.config = self._load_config(config_path)
        self.data = None
        self.events = None
        self.extrema = None
        self.event_stats = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.retracement_levels = self.config.get('advanced_events', {}).get('retracement_levels', [2, 3, 5, 7, 10])
        self.retracement_time_window = self.config.get('advanced_events', {}).get('retracement_time_window', [1, 90])
        self.min_extremum_move = self.config.get('advanced_events', {}).get('min_extremum_move', 1.0)
        self.culmination_threshold = self.config.get('advanced_events', {}).get('culmination_threshold', 0.8)
        self.consolidation_volatility_threshold = self.config.get('advanced_events', {}).get('consolidation_volatility_threshold', 0.5)
        
    def _load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            'advanced_events': {
                'retracement_levels': [2, 3, 5, 7, 10],
                'retracement_time_window': [1, 90],
                'min_extremum_move': 1.0,
                'culmination_threshold': 0.8,
                'consolidation_volatility_threshold': 0.5
            }
        }
        
        if Path(config_path).exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                user_config = yaml.safe_load(f)
                if user_config:
                    default_config.update(user_config)
        
        return default_config
    
    def detect_advanced_events(self, data):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
        
        Args:
            data: DataFrame —Å OHLC –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            DataFrame —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
        """
        print("üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π...")
        
        self.data = data.copy()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['open', 'high', 'low', 'close']
        for col in required_cols:
            if col not in self.data.columns:
                print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col}")
                return self.data
            self.data[col] = pd.to_numeric(self.data[col], errors='coerce').fillna(method='ffill')
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        self._calculate_base_metrics()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        self._find_extrema()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        self._detect_retracements()
        self._detect_culminations()
        self._detect_continuations()
        self._detect_consolidations()
        self._detect_transition_zones()
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self._calculate_event_statistics()
        
        print(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        self._print_event_summary()
        
        return self.data
    
    def _calculate_base_metrics(self):
        """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –¶–µ–Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.data['hl_range'] = self.data['high'] - self.data['low']
        self.data['true_range'] = self._calculate_true_range()
        self.data['price_change_pct'] = ((self.data['close'] - self.data['open']) / self.data['open']) * 100
        self.data['price_change_abs'] = abs(self.data['price_change_pct'])
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (rolling)
        for window in [5, 10, 20]:
            self.data[f'volatility_{window}'] = self.data['true_range'].rolling(window=window).std()
            self.data[f'price_range_{window}'] = self.data['hl_range'].rolling(window=window).mean()
        
        # Momentum –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for window in [3, 5, 10, 20]:
            self.data[f'momentum_{window}'] = self.data['close'].pct_change(window) * 100
            self.data[f'roc_{window}'] = ((self.data['close'] / self.data['close'].shift(window)) - 1) * 100
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
        for window in [10, 20, 50]:
            self.data[f'sma_{window}'] = self.data['close'].rolling(window=window).mean()
            self.data[f'close_vs_sma_{window}'] = ((self.data['close'] / self.data[f'sma_{window}']) - 1) * 100
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π
        self.data.fillna(method='ffill', inplace=True)
        self.data.fillna(0, inplace=True)
        
        print(f"   –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    def _calculate_true_range(self):
        """–†–∞—Å—á–µ—Ç True Range"""
        high_low = self.data['high'] - self.data['low']
        high_close_prev = abs(self.data['high'] - self.data['close'].shift(1))
        low_close_prev = abs(self.data['low'] - self.data['close'].shift(1))
        
        true_range = pd.concat([high_low, high_close_prev, low_close_prev], axis=1).max(axis=1)
        return true_range.fillna(high_low)
    
    def _find_extrema(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ (–ø–∏–∫–æ–≤ –∏ –≤–ø–∞–¥–∏–Ω)"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        windows = [5, 10, 15, 20]
        
        extrema_data = []
        
        for window in windows:
            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤
            highs = argrelextrema(self.data['high'].values, np.greater, order=window)[0]
            for idx in highs:
                if idx < len(self.data):
                    extrema_data.append({
                        'index': idx,
                        'type': 'high',
                        'price': self.data.iloc[idx]['high'],
                        'window': window,
                        'timestamp': self.data.index[idx] if hasattr(self.data.index, '__getitem__') else idx
                    })
            
            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤
            lows = argrelextrema(self.data['low'].values, np.less, order=window)[0]
            for idx in lows:
                if idx < len(self.data):
                    extrema_data.append({
                        'index': idx,
                        'type': 'low',
                        'price': self.data.iloc[idx]['low'],
                        'window': window,
                        'timestamp': self.data.index[idx] if hasattr(self.data.index, '__getitem__') else idx
                    })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        if extrema_data:
            self.extrema = pd.DataFrame(extrema_data).drop_duplicates(['index', 'type']).sort_values('index')
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–Ω–∞—á–∏–º—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            self._filter_significant_extrema()
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(self.extrema)} —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤")
        else:
            self.extrema = pd.DataFrame()
            print("   –≠–∫—Å—Ç—Ä–µ–º—É–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def _filter_significant_extrema(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–Ω–∞—á–∏–º—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤"""
        if self.extrema.empty:
            return
        
        # –†–∞—Å—á–µ—Ç –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
        significant_extrema = []
        
        for i, extremum in self.extrema.iterrows():
            if len(significant_extrema) == 0:
                significant_extrema.append(extremum)
                continue
            
            prev_extremum = significant_extrema[-1]
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            price_change = abs((extremum['price'] - prev_extremum['price']) / prev_extremum['price']) * 100
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
            if price_change >= self.min_extremum_move:
                significant_extrema.append(extremum)
        
        self.extrema = pd.DataFrame(significant_extrema)
    
    def _detect_retracements(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–∫–∞—Ç–æ–≤
        for level in self.retracement_levels:
            if level < 10:
                self.data[f'retracement_{level}_{level+1}pct'] = 0
            else:
                self.data[f'retracement_{level}pct_plus'] = 0
        
        self.data['retracement_type'] = 'none'
        self.data['retracement_strength'] = 0.0
        
        if self.extrema.empty:
            print("   –û—Ç–∫–∞—Ç—ã: —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"   –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–∞—Ç–æ–≤ –¥–ª—è {len(self.extrema)} —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤...")
        
        retracement_count = 0
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—Ç–∫–∞—Ç–æ–≤
        for i, extremum in self.extrema.iterrows():
            extremum_idx = extremum['index']
            extremum_price = extremum['price']
            extremum_type = extremum['type']
            
            # –ü–æ–∏—Å–∫ –æ—Ç–∫–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
            retracement_info = self._analyze_retracement_from_extremum(
                extremum_idx, extremum_price, extremum_type
            )
            
            if retracement_info:
                retracement_count += 1
                
                # –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö
                retracement_level = retracement_info['level']
                retracement_end_idx = retracement_info['end_index']
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–∫–∞—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é
                level_column = self._get_retracement_column(retracement_level)
                
                if level_column in self.data.columns:
                    self.data.loc[retracement_end_idx, level_column] = 1
                    self.data.loc[retracement_end_idx, 'retracement_type'] = f"retracement_{retracement_level:.1f}pct"
                    self.data.loc[retracement_end_idx, 'retracement_strength'] = retracement_info['strength']
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {retracement_count} –æ—Ç–∫–∞—Ç–æ–≤")
    
    def _analyze_retracement_from_extremum(self, extremum_idx, extremum_price, extremum_type):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–∞—Ç–∞ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–∞—Ç–∞
        min_time, max_time = self.retracement_time_window
        start_search = extremum_idx + 1
        end_search = min(len(self.data), extremum_idx + max_time)
        
        if start_search >= len(self.data):
            return None
        
        search_data = self.data.iloc[start_search:end_search]
        
        max_retracement = 0
        max_retracement_idx = None
        retracement_end_idx = None
        
        current_extremum_price = extremum_price
        
        for idx, row in search_data.iterrows():
            actual_idx = start_search + (idx - search_data.index[0]) if hasattr(search_data.index, '__getitem__') else idx
            
            if extremum_type == 'high':
                # –î–ª—è –º–∞–∫—Å–∏–º—É–º–∞ –∏—â–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
                retracement_pct = ((extremum_price - row['low']) / extremum_price) * 100
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–æ–π
                if row['low'] <= current_extremum_price:
                    current_extremum_price = row['low']
                    
                    if retracement_pct > max_retracement:
                        max_retracement = retracement_pct
                        max_retracement_idx = actual_idx
                else:
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—à–ª–∞ –≤–≤–µ—Ä—Ö –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—è - –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω–µ—Ü –æ—Ç–∫–∞—Ç–∞
                    if max_retracement > 0:
                        retracement_end_idx = actual_idx
                        break
                        
            else:  # extremum_type == 'low'
                # –î–ª—è –º–∏–Ω–∏–º—É–º–∞ –∏—â–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                retracement_pct = ((row['high'] - extremum_price) / extremum_price) * 100
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è —Ö–∞–π
                if row['high'] >= current_extremum_price:
                    current_extremum_price = row['high']
                    
                    if retracement_pct > max_retracement:
                        max_retracement = retracement_pct
                        max_retracement_idx = actual_idx
                else:
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—è - –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω–µ—Ü –æ—Ç–∫–∞—Ç–∞
                    if max_retracement > 0:
                        retracement_end_idx = actual_idx
                        break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—è–º –æ—Ç–∫–∞—Ç–æ–≤
        if max_retracement >= 2.0:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç 2%
            retracement_level = self._classify_retracement_level(max_retracement)
            
            return {
                'level': retracement_level,
                'strength': max_retracement,
                'max_index': max_retracement_idx,
                'end_index': retracement_end_idx or max_retracement_idx,
                'extremum_type': extremum_type
            }
        
        return None
    
    def _classify_retracement_level(self, retracement_pct):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –æ—Ç–∫–∞—Ç–∞"""
        if retracement_pct >= 10:
            return 10  # 10%+
        elif retracement_pct >= 7:
            return 7   # 7-10%
        elif retracement_pct >= 5:
            return 5   # 5-7%
        elif retracement_pct >= 3:
            return 3   # 3-5%
        else:
            return 2   # 2-3%
    
    def _get_retracement_column(self, level):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –æ—Ç–∫–∞—Ç–∞"""
        if level >= 10:
            return 'retracement_10pct_plus'
        elif level >= 7:
            return 'retracement_7_10pct'
        elif level >= 5:
            return 'retracement_5_7pct'
        elif level >= 3:
            return 'retracement_3_5pct'
        else:
            return 'retracement_2_3pct'
    
    def _detect_culminations(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–π (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º)"""
        
        self.data['culmination'] = 0
        self.data['culmination_strength'] = 0.0
        self.data['culmination_type'] = 'none'
        
        if self.extrema.empty:
            print("   –ö—É–ª—å–º–∏–Ω–∞—Ü–∏–∏: —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"   –ê–Ω–∞–ª–∏–∑ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–π...")
        
        culmination_count = 0
        
        # –ü–æ–∏—Å–∫ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–π —Å—Ä–µ–¥–∏ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        for i, extremum in self.extrema.iterrows():
            extremum_idx = extremum['index']
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
            culmination_info = self._analyze_culmination(extremum_idx, extremum)
            
            if culmination_info and culmination_info['strength'] >= self.culmination_threshold:
                culmination_count += 1
                
                self.data.loc[extremum_idx, 'culmination'] = 1
                self.data.loc[extremum_idx, 'culmination_strength'] = culmination_info['strength']
                self.data.loc[extremum_idx, 'culmination_type'] = culmination_info['type']
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {culmination_count} –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–π")
    
    def _analyze_culmination(self, extremum_idx, extremum):
        """–ê–Ω–∞–ª–∏–∑ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏ –æ—Ç —ç–∫—Å—Ç—Ä–µ–º—É–º–∞"""
        
        # –ü–æ–∏—Å–∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
        lookforward = min(50, len(self.data) - extremum_idx - 1)  # –î–æ 50 –ø–µ—Ä–∏–æ–¥–æ–≤ –≤–ø–µ—Ä–µ–¥
        
        if lookforward < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            return None
        
        extremum_price = extremum['price']
        extremum_type = extremum['type']
        
        future_data = self.data.iloc[extremum_idx + 1:extremum_idx + 1 + lookforward]
        
        if len(future_data) == 0:
            return None
        
        if extremum_type == 'high':
            # –ò—â–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
            min_price = future_data['low'].min()
            decline_pct = ((extremum_price - min_price) / extremum_price) * 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            stability_score = self._calculate_movement_stability(future_data, 'down')
            
            culmination_strength = (decline_pct / 10) * stability_score  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            
            if decline_pct >= 5.0 and stability_score > 0.6:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                return {
                    'strength': min(culmination_strength, 1.0),
                    'type': 'top_culmination',
                    'decline_pct': decline_pct,
                    'stability': stability_score
                }
        
        else:  # extremum_type == 'low'
            # –ò—â–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            max_price = future_data['high'].max()
            rise_pct = ((max_price - extremum_price) / extremum_price) * 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            stability_score = self._calculate_movement_stability(future_data, 'up')
            
            culmination_strength = (rise_pct / 10) * stability_score  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            
            if rise_pct >= 5.0 and stability_score > 0.6:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                return {
                    'strength': min(culmination_strength, 1.0),
                    'type': 'bottom_culmination',
                    'rise_pct': rise_pct,
                    'stability': stability_score
                }
        
        return None
    
    def _calculate_movement_stability(self, data, direction):
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è"""
        if len(data) < 5:
            return 0
        
        if direction == 'down':
            # –î–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–Ω–∏–∑: –ø—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ —Å –ø–æ–Ω–∏–∂–µ–Ω–∏–µ–º
            down_periods = (data['close'].diff() < 0).sum()
            stability = down_periods / len(data)
        else:
            # –î–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–≤–µ—Ä—Ö: –ø—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º
            up_periods = (data['close'].diff() > 0).sum()
            stability = up_periods / len(data)
        
        return stability
    
    def _detect_continuations(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π/—Ä–∞–∑–≤–∏—Ç–∏—è –¥–≤–∏–∂–µ–Ω–∏—è"""
        
        self.data['continuation'] = 0
        self.data['continuation_strength'] = 0.0
        self.data['continuation_type'] = 'none'
        
        print(f"   –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π –¥–≤–∏–∂–µ–Ω–∏—è...")
        
        continuation_count = 0
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–æ–µ–≤ —É—Ä–æ–≤–Ω–µ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π —Ç—Ä–µ–Ω–¥–æ–≤
        for i in range(20, len(self.data) - 10):  # –ù—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏ –±—É–¥—É—â–µ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
            continuation_info = self._analyze_continuation(i)
            
            if continuation_info:
                continuation_count += 1
                
                self.data.iloc[i, self.data.columns.get_loc('continuation')] = 1
                self.data.iloc[i, self.data.columns.get_loc('continuation_strength')] = continuation_info['strength']
                self.data.iloc[i, self.data.columns.get_loc('continuation_type')] = continuation_info['type']
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {continuation_count} –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π")
    
    def _analyze_continuation(self, idx):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤ —Ç–æ—á–∫–µ"""
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (20 –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞–∑–∞–¥)
        history_start = max(0, idx - 20)
        history_data = self.data.iloc[history_start:idx]
        
        # –ê–Ω–∞–ª–∏–∑ –±—É–¥—É—â–µ–≥–æ (10 –ø–µ—Ä–∏–æ–¥–æ–≤ –≤–ø–µ—Ä–µ–¥)
        future_end = min(len(self.data), idx + 10)
        future_data = self.data.iloc[idx:future_end]
        
        if len(history_data) < 10 or len(future_data) < 5:
            return None
        
        current_price = self.data.iloc[idx]['close']
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        history_trend = self._identify_trend(history_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω–µ–π
        resistance_level = history_data['high'].max()
        support_level = history_data['low'].min()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –±—É–¥—É—â–µ–º
        future_movement = self._analyze_future_movement(future_data, current_price)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        if history_trend == 'up' and current_price > resistance_level:
            # –ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
            if future_movement['direction'] == 'up' and future_movement['strength'] > 0.5:
                return {
                    'strength': future_movement['strength'],
                    'type': 'uptrend_continuation',
                    'breakout_level': resistance_level
                }
        
        elif history_trend == 'down' and current_price < support_level:
            # –ü—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
            if future_movement['direction'] == 'down' and future_movement['strength'] > 0.5:
                return {
                    'strength': future_movement['strength'],
                    'type': 'downtrend_continuation',
                    'breakout_level': support_level
                }
        
        return None
    
    def _identify_trend(self, data):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        if len(data) < 5:
            return 'sideways'
        
        start_price = data['close'].iloc[0]
        end_price = data['close'].iloc[-1]
        
        price_change_pct = ((end_price - start_price) / start_price) * 100
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞
        if price_change_pct > 2:
            return 'up'
        elif price_change_pct < -2:
            return 'down'
        else:
            return 'sideways'
    
    def _analyze_future_movement(self, future_data, current_price):
        """–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º"""
        if len(future_data) < 3:
            return {'direction': 'none', 'strength': 0}
        
        max_price = future_data['high'].max()
        min_price = future_data['low'].min()
        
        upward_move = ((max_price - current_price) / current_price) * 100
        downward_move = ((current_price - min_price) / current_price) * 100
        
        if upward_move > downward_move and upward_move > 1:
            return {'direction': 'up', 'strength': min(upward_move / 5, 1.0)}
        elif downward_move > upward_move and downward_move > 1:
            return {'direction': 'down', 'strength': min(downward_move / 5, 1.0)}
        else:
            return {'direction': 'sideways', 'strength': 0.1}
    
    def _detect_consolidations(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–π (–±–æ–∫–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è)"""
        
        self.data['consolidation'] = 0
        self.data['consolidation_strength'] = 0.0
        
        print(f"   –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–π...")
        
        consolidation_count = 0
        window = 10  # –û–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        
        for i in range(window, len(self.data) - window):
            consolidation_info = self._analyze_consolidation(i, window)
            
            if consolidation_info:
                consolidation_count += 1
                
                # –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
                start_idx = max(0, i - window // 2)
                end_idx = min(len(self.data), i + window // 2)
                
                for idx in range(start_idx, end_idx):
                    self.data.iloc[idx, self.data.columns.get_loc('consolidation')] = 1
                    self.data.iloc[idx, self.data.columns.get_loc('consolidation_strength')] = consolidation_info['strength']
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {consolidation_count} –∑–æ–Ω –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏")
    
    def _analyze_consolidation(self, idx, window):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –≤ –æ–∫–Ω–µ"""
        
        start_idx = max(0, idx - window // 2)
        end_idx = min(len(self.data), idx + window // 2)
        
        window_data = self.data.iloc[start_idx:end_idx]
        
        if len(window_data) < window * 0.8:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            return None
        
        # –†–∞—Å—á–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        price_range = window_data['high'].max() - window_data['low'].min()
        avg_price = window_data['close'].mean()
        range_pct = (price_range / avg_price) * 100
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ –æ–∫–Ω–µ
        volatility = window_data['true_range'].mean() / avg_price * 100
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        if (range_pct < 3.0 and  # –î–∏–∞–ø–∞–∑–æ–Ω –º–µ–Ω–µ–µ 3%
            volatility < self.consolidation_volatility_threshold):  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            return {
                'strength': max(0.1, 1.0 - (range_pct / 3.0)),  # –û–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                'range_pct': range_pct,
                'volatility': volatility
            }
        
        return None
    
    def _detect_transition_zones(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –∑–æ–Ω"""
        
        self.data['transition_zone'] = 0
        self.data['transition_strength'] = 0.0
        
        print(f"   –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –∑–æ–Ω...")
        
        transition_count = 0
        
        # –ü–æ–∏—Å–∫ –∑–æ–Ω –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏
        for i in range(20, len(self.data) - 20):
            transition_info = self._analyze_transition_zone(i)
            
            if transition_info:
                transition_count += 1
                
                self.data.iloc[i, self.data.columns.get_loc('transition_zone')] = 1
                self.data.iloc[i, self.data.columns.get_loc('transition_strength')] = transition_info['strength']
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {transition_count} –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –∑–æ–Ω")
    
    def _analyze_transition_zone(self, idx):
        """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω—ã"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∂–∏–º–∞
        before_window = self.data.iloc[idx-20:idx]
        after_window = self.data.iloc[idx:idx+20]
        
        if len(before_window) < 15 or len(after_window) < 15:
            return None
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ
        before_volatility = before_window['volatility_5'].mean()
        after_volatility = after_window['volatility_5'].mean()
        
        before_trend = self._identify_trend(before_window)
        after_trend = self._identify_trend(after_window)
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω—ã: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        if (before_trend != after_trend and 
            abs(before_volatility - after_volatility) > 0.1):
            
            transition_strength = min(1.0, abs(before_volatility - after_volatility))
            
            return {
                'strength': transition_strength,
                'before_trend': before_trend,
                'after_trend': after_trend,
                'volatility_change': abs(before_volatility - after_volatility)
            }
        
        return None
    
    def _calculate_event_statistics(self):
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π"""
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        event_types = [
            'retracement_2_3pct', 'retracement_3_5pct', 'retracement_5_7pct', 
            'retracement_7_10pct', 'retracement_10pct_plus',
            'culmination', 'continuation', 'consolidation', 'transition_zone'
        ]
        
        self.event_stats = {}
        
        for event_type in event_types:
            if event_type in self.data.columns:
                count = self.data[event_type].sum()
                rate = count / len(self.data)
                
                self.event_stats[event_type] = {
                    'count': int(count),
                    'rate': float(rate),
                    'percentage': float(rate * 100)
                }
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_events = sum(stats['count'] for stats in self.event_stats.values())
        
        self.event_stats['summary'] = {
            'total_events': total_events,
            'total_records': len(self.data),
            'overall_event_rate': total_events / len(self.data) if len(self.data) > 0 else 0
        }
    
    def _print_event_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º"""
        print("\nüìä –°–í–û–î–ö–ê –ü–û –ü–†–û–î–í–ò–ù–£–¢–´–ú –°–û–ë–´–¢–ò–Ø–ú:")
        
        if not self.event_stats:
            print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
            return
        
        for event_type, stats in self.event_stats.items():
            if event_type != 'summary':
                print(f"   {event_type}: {stats['count']} ({stats['percentage']:.1f}%)")
        
        summary = self.event_stats.get('summary', {})
        print(f"\n   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}")
        print(f"   –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {summary.get('overall_event_rate', 0):.2%}")
    
    def save_event_analysis(self, output_dir="results/advanced_events"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—ã—Ç–∏–π"""
        
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        self.data.to_csv(output_path / "advanced_events_data.csv", index=False)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        with open(output_path / "event_statistics.json", 'w') as f:
            json.dump(self.event_stats, f, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        if not self.extrema.empty:
            self.extrema.to_csv(output_path / "extrema_analysis.csv", index=False)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self._create_event_report(output_path)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        self._create_event_visualizations(output_path)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    
    def _create_event_report(self, output_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        report_lines = [
            "–ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó –°–û–ë–´–¢–ò–ô - –û–¢–ß–ï–¢",
            "=" * 50,
            f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"–ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(self.data)}",
            "",
            "–ü–ê–†–ê–ú–ï–¢–†–´ –ê–ù–ê–õ–ò–ó–ê:",
            f"–£—Ä–æ–≤–Ω–∏ –æ—Ç–∫–∞—Ç–æ–≤: {self.retracement_levels}%",
            f"–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–∞—Ç–æ–≤: {self.retracement_time_window[0]}-{self.retracement_time_window[1]} –º–∏–Ω",
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞: {self.min_extremum_move}%",
            f"–ü–æ—Ä–æ–≥ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏: {self.culmination_threshold}",
            f"–ü–æ—Ä–æ–≥ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {self.consolidation_volatility_threshold}",
            "",
            "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:",
        ]
        
        if self.event_stats:
            for event_type, stats in self.event_stats.items():
                if event_type != 'summary':
                    report_lines.append(f"{event_type}: {stats['count']} —Å–æ–±—ã—Ç–∏–π ({stats['percentage']:.1f}%)")
            
            summary = self.event_stats.get('summary', {})
            report_lines.extend([
                "",
                f"–ò–¢–û–ì–û: {summary.get('total_events', 0)} —Å–æ–±—ã—Ç–∏–π",
                f"–û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–æ–±—ã—Ç–∏–π: {summary.get('overall_event_rate', 0):.2%}",
            ])
        
        if not self.extrema.empty:
            report_lines.extend([
                "",
                f"–≠–ö–°–¢–†–ï–ú–£–ú–´: {len(self.extrema)} –Ω–∞–π–¥–µ–Ω–æ",
                f"–ú–∞–∫—Å–∏–º—É–º—ã: {len(self.extrema[self.extrema['type'] == 'high'])}",
                f"–ú–∏–Ω–∏–º—É–º—ã: {len(self.extrema[self.extrema['type'] == 'low'])}",
            ])
        
        report_lines.extend([
            "",
            "–§–ê–ô–õ–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:",
            "advanced_events_data.csv - –¥–∞–Ω–Ω—ã–µ —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏",
            "event_statistics.json - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "extrema_analysis.csv - –∞–Ω–∞–ª–∏–∑ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤",
            "event_timeline.png - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Å–æ–±—ã—Ç–∏–π",
            "",
            "=" * 50
        ])
        
        with open(output_path / "event_analysis_report.txt", 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
    
    def _create_event_visualizations(self, output_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Å–æ–±—ã—Ç–∏–π"""
        
        plt.style.use('default')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10))
        
        # –¶–µ–Ω–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        ax1.plot(self.data.index, self.data['close'], label='Close Price', linewidth=1)
        
        # –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        event_colors = {
            'retracement_2_3pct': 'lightblue',
            'retracement_3_5pct': 'blue', 
            'retracement_5_7pct': 'darkblue',
            'retracement_7_10pct': 'purple',
            'retracement_10pct_plus': 'red',
            'culmination': 'orange',
            'continuation': 'green',
            'consolidation': 'gray',
            'transition_zone': 'yellow'
        }
        
        for event_type, color in event_colors.items():
            if event_type in self.data.columns:
                event_indices = self.data[self.data[event_type] == 1].index
                if len(event_indices) > 0:
                    ax1.scatter(event_indices, self.data.loc[event_indices, 'close'], 
                              c=color, label=event_type, s=30, alpha=0.7)
        
        ax1.set_title('–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π')
        ax1.set_ylabel('–¶–µ–Ω–∞')
        ax1.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
        if self.event_stats:
            event_names = [name for name in self.event_stats.keys() if name != 'summary']
            event_counts = [self.event_stats[name]['count'] for name in event_names]
            
            bars = ax2.bar(range(len(event_names)), event_counts, color=plt.cm.tab10(range(len(event_names))))
            ax2.set_xlabel('–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax2.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π')
            ax2.set_xticks(range(len(event_names)))
            ax2.set_xticklabels(event_names, rotation=45, ha='right')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, bar in enumerate(bars):
                height = bar.get_height()
                ax2.text(bar.get_x() + bar.get_width()/2., height,
                        f'{int(height)}', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.savefig(output_path / "event_timeline.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if not self.extrema.empty:
            self._plot_extrema_analysis(output_path)
    
    def _plot_extrema_analysis(self, output_path):
        """–ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤"""
        
        fig, ax = plt.subplots(figsize=(15, 8))
        
        # –¶–µ–Ω–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫
        ax.plot(self.data.index, self.data['close'], label='Close Price', linewidth=1, color='black')
        
        # –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        for _, extremum in self.extrema.iterrows():
            idx = extremum['index']
            price = extremum['price']
            ext_type = extremum['type']
            
            if idx < len(self.data):
                color = 'red' if ext_type == 'high' else 'green'
                marker = 'v' if ext_type == 'high' else '^'
                
                ax.scatter(idx, price, c=color, marker=marker, s=100, 
                          label=f'{ext_type.capitalize()}' if ext_type not in ax.get_legend_handles_labels()[1] else "")
        
        ax.set_title('–ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤')
        ax.set_xlabel('–ò–Ω–¥–µ–∫—Å')
        ax.set_ylabel('–¶–µ–Ω–∞')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_path / "extrema_analysis.png", dpi=300, bbox_inches='tight')
        plt.close()


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
    import sys
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    np.random.seed(42)
    n_points = 200
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    base_price = 50000
    trend = np.cumsum(np.random.normal(0, 0.5, n_points))
    noise = np.random.normal(0, 100, n_points)
    
    close_prices = base_price + trend * 50 + noise
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
    close_prices[50] *= 1.05  # –ü–∏–∫
    close_prices[100] *= 0.95  # –í–ø–∞–¥–∏–Ω–∞
    close_prices[150] *= 1.08  # –ë–æ–ª—å—à–æ–π –ø–∏–∫
    
    # OHLC –¥–∞–Ω–Ω—ã–µ
    test_data = pd.DataFrame({
        'open': close_prices + np.random.normal(0, 10, n_points),
        'high': close_prices + abs(np.random.normal(20, 10, n_points)),
        'low': close_prices - abs(np.random.normal(20, 10, n_points)),
        'close': close_prices
    })
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    detector = AdvancedEventDetector()
    result_data = detector.detect_advanced_events(test_data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    detector.save_event_analysis("results/test_advanced_events")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ results/test_advanced_events/")


if __name__ == "__main__":
    main()