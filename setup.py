#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import sys
import subprocess
import importlib
import json
import yaml
from pathlib import Path
import platform
import os

class ProjectSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.python_version = sys.version_info
        self.platform = platform.system()
        self.project_dir = Path.cwd()
        self.errors = []
        self.warnings = []
        
    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
        
        if self.python_version < (3, 8):
            self.errors.append(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {sys.version}")
            print(f"‚ùå Python {sys.version}")
            return False
        else:
            print(f"‚úÖ Python {sys.version}")
            return True
    
    def check_pip(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pip"""
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ pip...")
        
        try:
            import pip
            print("‚úÖ pip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except ImportError:
            try:
                subprocess.run([sys.executable, '-m', 'pip', '--version'], 
                             check=True, capture_output=True)
                print("‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å")
                return True
            except subprocess.CalledProcessError:
                self.errors.append("pip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üìö –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        requirements_file = self.project_dir / "requirements.txt"
        
        if not requirements_file.exists():
            print("‚ö†Ô∏è requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é...")
            self.create_requirements_file()
        
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'
            ], check=True, capture_output=True)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '-r', str(requirements_file)
            ], check=True, capture_output=True)
            
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except subprocess.CalledProcessError as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
    
    def create_requirements_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt"""
        requirements_content = """# –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
pandas>=1.5.0
numpy>=1.21.0
matplotlib>=3.5.0
seaborn>=0.11.0

# –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
scikit-learn>=1.1.0

# –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
PyYAML>=6.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
python-dateutil>=2.8.0
tqdm>=4.64.0
scipy>=1.9.0
plotly>=5.10.0
"""
        
        with open("requirements.txt", "w") as f:
            f.write(requirements_content)
    
    def verify_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫...")
        
        required_packages = [
            'pandas', 'numpy', 'matplotlib', 'seaborn', 
            'sklearn', 'yaml', 'scipy'
        ]
        
        failed_imports = []
        
        for package in required_packages:
            try:
                importlib.import_module(package)
                print(f"   ‚úÖ {package}")
            except ImportError:
                failed_imports.append(package)
                print(f"   ‚ùå {package}")
        
        if failed_imports:
            self.errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {', '.join(failed_imports)}")
            return False
        
        print("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    
    def create_project_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        directories = [
            "data",
            "results",
            "results/plots",
            "results/reports",
            "results/type_1",
            "results/type_2", 
            "results/combined",
            "logs",
            "backup"
        ]
        
        for directory in directories:
            dir_path = self.project_dir / directory
            dir_path.mkdir(exist_ok=True)
            print(f"   üìÅ {directory}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        gitignore_path = self.project_dir / ".gitignore"
        if not gitignore_path.exists():
            gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Jupyter Notebook
.ipynb_checkpoints

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
financial_analyzer_env/

# Project specific
data/*.txt
!data/sample_*.txt
results/*
!results/.gitkeep
logs/*.log
backup/*
*.pkl
*.joblib

# OS
.DS_Store
Thumbs.db
"""
            with open(gitignore_path, "w") as f:
                f.write(gitignore_content)
            print("   üìÑ .gitignore")
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
        return True
    
    def create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        config_path = self.project_dir / "config.yaml"
        
        if config_path.exists():
            print("   ‚ö†Ô∏è config.yaml —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            return True
        
        default_config = {
            'analysis': {
                'min_accuracy': 0.60,
                'min_lift': 1.5,
                'validation_split': 0.3,
                'cv_folds': 5,
                'max_features': 100
            },
            'event_detection': {
                'volatility_threshold': 2.0,
                'volume_threshold': 1.5,
                'price_change_threshold': 0.5,
                'extreme_quantile': 0.8,
                'min_event_strength': 1.0
            },
            'feature_selection': {
                'max_features': 50,
                'correlation_threshold': 0.8,
                'min_variance': 0.01,
                'max_lags': 10
            },
            'scoring': {
                'min_roc_auc': 0.55,
                'min_activations': 10,
                'threshold_method': 'percentile',
                'rf_n_estimators': 100,
                'rf_random_state': 42,
                'rf_max_depth': 10
            },
            'timeframes': {
                'type_1': [2, 5, 15, 30],
                'type_2': ['1H', '4H', 'D', 'W']
            }
        }
        
        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(default_config, f, default_flow_style=False, allow_unicode=True)
        
        print("   üìÑ config.yaml")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return True
    
    def create_sample_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üé≤ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        sample_file = self.project_dir / "data" / "sample_log.txt"
        
        if sample_file.exists():
            print("   ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            return True
        
        try:
            # –ò–º–ø–æ—Ä—Ç data_utils –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            sys.path.append(str(self.project_dir))
            from data_utils import DataProcessor
            
            processor = DataProcessor()
            processor.generate_sample_data(str(sample_file), num_records=150)
            
            print("   üìÑ sample_log.txt")
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
            return True
            
        except Exception as e:
            self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            return False
    
    def create_launcher_scripts(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...")
        
        # Windows batch —Ñ–∞–π–ª
        if self.platform == "Windows" or True:  # –°–æ–∑–¥–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            batch_content = """@echo off
echo –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...
python main.py data\\sample_log.txt
pause
"""
            with open("quick_start.bat", "w", encoding="utf-8") as f:
                f.write(batch_content)
            print("   üìÑ quick_start.bat")
        
        # Unix shell script
        if self.platform in ["Linux", "Darwin"] or True:  # –°–æ–∑–¥–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            shell_content = """#!/bin/bash
echo "–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞..."
python3 main.py data/sample_log.txt
read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞..."
"""
            shell_file = Path("quick_start.sh")
            with open(shell_file, "w", encoding="utf-8") as f:
                f.write(shell_content)
            
            # –ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è Unix
            if self.platform in ["Linux", "Darwin"]:
                shell_file.chmod(0o755)
            print("   üìÑ quick_start.sh")
        
        print("‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω—ã")
        return True
    
    def create_readme_summary(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        print("üìñ –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
        
        quick_start_content = """# üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢

## –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:

### 1. –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
```bash
python main.py data/sample_log.txt
```

### 2. TYPE-–∞–Ω–∞–ª–∏–∑ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
```bash
python type_analyzer.py data/sample_log.txt
```

### 3. –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
```bash
python data_utils.py sample data/my_test.txt -n 300
python data_utils.py validate data/my_log.txt
python data_utils.py clean data/my_log.txt
```

### 4. API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
```python
from scoring_api import ScoringAPI
api = ScoringAPI()
result = api.score_log_line("–≤–∞—à–∞_—Å—Ç—Ä–æ–∫–∞_–ª–æ–≥–∞")
```

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
- `results/weight_matrix.csv` - –º–∞—Ç—Ä–∏—Ü–∞ –≤–µ—Å–æ–≤ (–≥–ª–∞–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!)
- `results/scoring_config.json` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–∏–Ω–≥–∞
- `results/plots/` - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
- `results/reports/` - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞:
–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ `config.yaml` –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã.

## ‚ùì –ü—Ä–æ–±–ª–µ–º—ã:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ `requirements.txt` - –≤—Å–µ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `python3` –≤–º–µ—Å—Ç–æ `python` –Ω–∞ Linux/Mac
3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–°–æ–∑–¥–∞–π—Ç–µ issue —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –≤–∞—à–µ–≥–æ –ª–æ–≥–∞.
"""
        
        with open("QUICK_START.md", "w", encoding="utf-8") as f:
            f.write(quick_start_content)
        
        print("   üìÑ QUICK_START.md")
        print("‚úÖ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return True
    
    def validate_installation(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            "main.py", "type_analyzer.py", "data_utils.py", 
            "scoring_api.py", "config.yaml", "requirements.txt"
        ]
        
        missing_files = []
        for file_name in required_files:
            if not (self.project_dir / file_name).exists():
                missing_files.append(file_name)
        
        if missing_files:
            self.errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return False
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        try:
            sys.path.insert(0, str(self.project_dir))
            import main
            print("   ‚úÖ main.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        except ImportError as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ main.py: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sample_file = self.project_dir / "data" / "sample_log.txt"
        if sample_file.exists():
            print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            self.warnings.append("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
    
    def run_setup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üõ†Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ï–ö–¢–ê")
        print("=" * 50)
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python", self.check_python_version),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ pip", self.check_pip),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_dependencies),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", self.verify_imports),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", self.create_project_structure),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.create_default_config),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", self.create_sample_data),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤", self.create_launcher_scripts),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", self.create_readme_summary),
            ("–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è", self.validate_installation)
        ]
        
        completed_steps = 0
        
        for step_name, step_function in steps:
            print(f"\nüìã {step_name}...")
            try:
                if step_function():
                    completed_steps += 1
                else:
                    print(f"‚ùå {step_name} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                self.errors.append(f"–û—à–∏–±–∫–∞ –≤ {step_name}: {e}")
                print(f"‚ùå {step_name}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 50)
        
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {completed_steps}/{len(steps)}")
        
        if self.warnings:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   - {warning}")
        
        if self.errors:
            print(f"‚ùå –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors:
                print(f"   - {error}")
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("   2. –û–±–Ω–æ–≤–∏—Ç–µ pip: python -m pip install --upgrade pip")
            print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
        else:
            print("\nüéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py data/sample_log.txt")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ results/")
            print("   3. –ò–∑—É—á–∏—Ç–µ QUICK_START.md –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
            print("   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config.yaml –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
            if completed_steps == len(steps):
                try:
                    response = input("\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–π—á–∞—Å? (y/n): ")
                    if response.lower() in ['y', 'yes', '–¥–∞']:
                        self.run_test_analysis()
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        return completed_steps == len(steps) and not self.errors
    
    def run_test_analysis(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        try:
            sample_file = self.project_dir / "data" / "sample_log.txt"
            
            if not sample_file.exists():
                print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            sys.path.insert(0, str(self.project_dir))
            from main import FinancialLogAnalyzer
            
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
            analyzer = FinancialLogAnalyzer()
            
            print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)...")
            results = analyzer.run_full_analysis(str(sample_file))
            
            if results['status'] == 'success':
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                if 'validation_results' in results and results['validation_results']:
                    vr = results['validation_results']
                    print(f"   üìà ROC-AUC: {vr.get('roc_auc', 0):.3f}")
                    print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {vr.get('accuracy', 0):.3f}")
                    print(f"   üöÄ Lift: {vr.get('lift', 0):.3f}")
                
                print("   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ results/")
                print("   üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ weight_matrix.csv - —ç—Ç–æ –≤–∞—à–∞ –º–æ–¥–µ–ª—å!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {results.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup = ProjectSetup()
    
    try:
        success = setup.run_setup()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()