#!/usr/bin/env python3
"""
–ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê - –ü–†–û–í–ï–†–Ø–ï–ú –†–ê–ë–û–¢–ê–ï–¢ –õ–ò –û–ù
"""

import sys
import os
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥—É–ª—è–º–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from advanced_log_parser import AdvancedLogParser
    print("‚úÖ –ò–ú–ü–û–†–¢ –ü–ê–†–°–ï–†–ê –£–°–ü–ï–®–ï–ù")
except ImportError as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
    sys.exit(1)

def test_parser():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞"""
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏  
    test_line = """[2024-08-05T09:24:00.000+03:00]: LTF|event_2025-06-28_22-55|1|2024-08-05 06:24|RED|-1.79%|11.5K|BIG_BODY|66%|-18.8%_24h|o:50254.8|h:50258.6|l:48888|c:49353.4|rng:1370.6|ef2--7.19|as2-3.33|vc2-2.4|nw2-!!|ze2--4.12|co2--213|ro2-11|so2-11"""
    
    print("\nüß™ –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = AdvancedLogParser()
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É
    record = parser._parse_single_line(test_line, 0)
    
    if not record:
        print("‚ùå –ü–ê–†–°–ï–† –ù–ï –ò–ó–í–õ–ï–ö –î–ê–ù–ù–´–ï")
        return False
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: {len(record)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    critical_tests = [
        ('ef2', -7.19),
        ('as2', 3.33), 
        ('vc2', 2.4),
        ('nw2', 2),  # –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ !!
        ('ze2', -4.12),
        ('co2', -213),
        ('ro2', 11),
        ('so2', 11)
    ]
    
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô:")
    passed = 0
    
    for field, expected in critical_tests:
        if field in record:
            actual = record[field]
            if isinstance(expected, float):
                match = abs(actual - expected) < 0.01
            else:
                match = actual == expected
                
            if match:
                print(f"   ‚úÖ {field}: {actual} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
                passed += 1
            else:
                print(f"   ‚ùå {field}: {actual} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
        else:
            print(f"   ‚ùå {field}: –ù–ï –ù–ê–ô–î–ï–ù–û")
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(critical_tests)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ ef –ø–æ–ª—è
    print(f"\nüî• EF –ü–û–õ–Ø:")
    ef_fields = [k for k in record.keys() if k.startswith('ef') and not k.endswith('_type')]
    for field in ef_fields:
        print(f"   {field}: {record[field]}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ nw –ø–æ–ª—è
    print(f"\nüö® NW –ü–û–õ–Ø:")
    nw_fields = [k for k in record.keys() if k.startswith('nw')]
    for field in nw_fields:
        print(f"   {field}: {record[field]}")
    
    return passed >= 6  # –ú–∏–Ω–∏–º—É–º 6 –∏–∑ 8 –ø–æ–ª–µ–π –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å

def test_file_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞"""
    
    log_file = "data/dslog_btc_0508240229_ltf.txt"
    
    if not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        return False
    
    print(f"\nüìÅ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –§–ê–ô–õ–ê")
    print("=" * 40)
    
    parser = AdvancedLogParser()
    df = parser.parse_log_file(log_file)
    
    if df.empty:
        print("‚ùå –§–ê–ô–õ –ù–ï –°–ü–ê–†–°–ò–õ–°–Ø")
        return False
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: {len(df.columns)}")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    critical_fields = ['ef2', 'as2', 'vc2', 'nw2', 'ze2']
    found_critical = sum(1 for field in critical_fields if field in df.columns)
    
    print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: {found_critical}/{len(critical_fields)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\nüìä –ü–†–ò–ú–ï–†–´ –ó–ù–ê–ß–ï–ù–ò–ô:")
    for field in critical_fields:
        if field in df.columns:
            non_null = df[field].dropna()
            if len(non_null) > 0:
                print(f"   {field}: –∞–∫—Ç–∏–≤–∞—Ü–∏–π={len(non_null)}, –ø—Ä–∏–º–µ—Ä={non_null.iloc[0]}")
            else:
                print(f"   {field}: –ø–æ–ª–µ –µ—Å—Ç—å, –Ω–æ –≤—Å–µ NULL")
        else:
            print(f"   {field}: –ù–ï –ù–ê–ô–î–ï–ù–û")
    
    return found_critical >= 4

if __name__ == "__main__":
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏
    test1_passed = test_parser()
    
    # –¢–µ—Å—Ç 2: –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞  
    test2_passed = test_file_parsing()
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   –¢–µ—Å—Ç —Ñ–∞–π–ª–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_passed and test2_passed:
        print(f"\nüéâ –ü–ê–†–°–ï–† –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        print(f"   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫–∞–ª—å–ø –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
    else:
        print(f"\nüí• –ü–ê–†–°–ï–† –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"   –ù—É–∂–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ advanced_log_parser.py")
