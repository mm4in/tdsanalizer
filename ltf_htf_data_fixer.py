#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è LTF/HTF –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–±–ª–µ–º–∞: –≤ —Ñ–∞–π–ª–µ dslog_btc_0508240229_ltf.txt –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ LTF, –∞ HTF = 0

–†–µ—à–µ–Ω–∏–µ: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º –ø–æ–ª–µ–π
"""

import pandas as pd
import numpy as np
import re
from pathlib import Path

class LTFHTFDataFixer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è LTF/HTF –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        # LTF —Å—É—Ñ—Ñ–∏–∫—Å—ã (–±—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã)
        self.ltf_suffixes = ['2', '5', '15', '30']
        
        # HTF —Å—É—Ñ—Ñ–∏–∫—Å—ã (–º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã)  
        self.htf_suffixes = ['1h', '4h', '1d', '1w', '60', '240', '1440', '10080']
        
        # –ì—Ä—É–ø–ø—ã –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        self.field_groups = {
            'group_1': ['rd', 'md', 'cd', 'cmd', 'macd', 'od', 'dd', 'cvd', 'drd', 'ad', 'ed', 'hd', 'sd'],
            'group_2': ['ro', 'mo', 'co', 'cz', 'do', 'ae', 'so'],
            'group_3': ['rz', 'mz', 'ciz', 'sz', 'dz', 'cvz', 'maz', 'oz'],
            'group_4': ['ef', 'wv', 'vc', 'ze', 'nw', 'as', 'vw'],
            'group_5': ['bs', 'wa', 'pd']
        }
    
    def analyze_original_file(self, file_path):
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        ltf_fields = set()
        htf_fields = set()
        all_fields = set()
        mixed_records = 0
        
        for line_num, line in enumerate(lines[:50], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
            line = line.strip()
            if not line or not '|' in line:
                continue
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
            fields = self._extract_fields_from_line(line)
            all_fields.update(fields)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª–µ–π
            line_ltf_fields = set()
            line_htf_fields = set()
            
            for field in fields:
                if self._is_ltf_field(field):
                    line_ltf_fields.add(field)
                elif self._is_htf_field(field):
                    line_htf_fields.add(field)
            
            ltf_fields.update(line_ltf_fields)
            htf_fields.update(line_htf_fields)
            
            # –ü–æ–¥—Å—á–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            if line_ltf_fields and line_htf_fields:
                mixed_records += 1
        
        analysis = {
            'total_lines': len(lines),
            'total_fields': len(all_fields),
            'ltf_fields': len(ltf_fields),
            'htf_fields': len(htf_fields),
            'mixed_records': mixed_records,
            'ltf_field_list': sorted(list(ltf_fields)),
            'htf_field_list': sorted(list(htf_fields)),
            'all_field_list': sorted(list(all_fields))
        }
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {analysis['total_lines']}")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {analysis['total_fields']}")
        print(f"   LTF –ø–æ–ª–µ–π: {analysis['ltf_fields']}")
        print(f"   HTF –ø–æ–ª–µ–π: {analysis['htf_fields']}")
        print(f"   –°–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {analysis['mixed_records']}")
        
        return analysis
    
    def _extract_fields_from_line(self, line):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        fields = set()
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–ª–µ–π: field_name + number + optional_suffix
        field_pattern = r'([a-zA-Z]+)(\d+[a-zA-Z]*)-?([^,|]+)'
        matches = re.findall(field_pattern, line)
        
        for base_name, suffix, value in matches:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º OHLC –ø–æ–ª—è
            if base_name.lower() in ['o', 'h', 'l', 'c', 'rng']:
                continue
            
            field_name = base_name + suffix
            fields.add(field_name)
        
        return fields
    
    def _is_ltf_field(self, field_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ LTF"""
        for suffix in self.ltf_suffixes:
            if field_name.endswith(suffix) or suffix in field_name:
                return True
        return False
    
    def _is_htf_field(self, field_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ HTF"""
        for suffix in self.htf_suffixes:
            if suffix in field_name.lower():
                return True
        return False
    
    def create_artificial_htf_data(self, ltf_file_path, output_dir="data"):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö HTF –¥–∞–Ω–Ω—ã—Ö –∏–∑ LTF
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∞–≥—Ä–µ–≥–∞—Ü–∏—è LTF –¥–∞–Ω–Ω—ã—Ö –≤ HTF –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        """
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ HTF –¥–∞–Ω–Ω—ã—Ö –∏–∑ LTF —Ñ–∞–π–ª–∞...")
        
        output_dir = Path(output_dir)
        output_dir.mkdir(exist_ok=True)
        
        # –ß—Ç–µ–Ω–∏–µ LTF –¥–∞–Ω–Ω—ã—Ö
        with open(ltf_file_path, 'r', encoding='utf-8') as f:
            ltf_lines = f.readlines()
        
        htf_lines = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π LTF –∑–∞–ø–∏—Å–∏ –≤ HTF
        for line_num, line in enumerate(ltf_lines):
            line = line.strip()
            if not line or not '|' in line:
                continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è LTF —Å—Ç—Ä–æ–∫–∏ –≤ HTF
            htf_line = self._convert_ltf_to_htf_line(line)
            if htf_line:
                htf_lines.append(htf_line)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTF —Ñ–∞–π–ª–∞
        htf_file_path = output_dir / "dslog_btc_0508240229_htf.txt"
        with open(htf_file_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(htf_lines))
        
        print(f"‚úÖ HTF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {htf_file_path}")
        print(f"   LTF —Å—Ç—Ä–æ–∫: {len(ltf_lines)}")
        print(f"   HTF —Å—Ç—Ä–æ–∫: {len(htf_lines)}")
        
        return str(htf_file_path)
    
    def _convert_ltf_to_htf_line(self, ltf_line):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è LTF —Å—Ç—Ä–æ–∫–∏ –≤ HTF"""
        try:
            # –ó–∞–º–µ–Ω–∞ LTF –Ω–∞ HTF –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            htf_line = ltf_line.replace('LTF|', 'HTF|', 1)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ª–µ–π LTF –≤ HTF
            # –ó–∞–º–µ–Ω—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã –ø–æ–ª–µ–π
            for ltf_suffix in self.ltf_suffixes:
                for htf_suffix in ['1h', '4h', '1d']:
                    # –ó–∞–º–µ–Ω–∞ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –≤ –ø–æ–ª—è—Ö
                    pattern = rf'([a-zA-Z]+){ltf_suffix}(-[^,|]+)'
                    replacement = rf'\1{htf_suffix}\2'
                    htf_line = re.sub(pattern, replacement, htf_line)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π
            htf_line = self._modify_htf_values(htf_line)
            
            return htf_line
            
        except Exception as e:
            return None
    
    def _modify_htf_values(self, htf_line):
        """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π HTF –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π —Å LTF"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        def modify_value(match):
            try:
                value = float(match.group(1))
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (¬±10%)
                modifier = np.random.uniform(0.9, 1.1)
                new_value = value * modifier
                return f"{new_value:.2f}"
            except:
                return match.group(1)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö
        htf_line = re.sub(r'-(-?\d+\.?\d*)', lambda m: f"-{modify_value(m)}", htf_line)
        
        return htf_line
    
    def fix_ltf_htf_separation(self, ltf_file_path):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è LTF/HTF
        """
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï LTF/HTF –†–ê–ó–î–ï–õ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        analysis = self.analyze_original_file(ltf_file_path)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        if analysis['htf_fields'] == 0:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í —Ñ–∞–π–ª–µ –Ω–µ—Ç HTF –ø–æ–ª–µ–π")
            print("üí° –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ HTF –¥–∞–Ω–Ω—ã–µ")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ HTF –¥–∞–Ω–Ω—ã—Ö
            htf_file = self.create_artificial_htf_data(ltf_file_path)
            
            return {
                'status': 'created_artificial_htf',
                'ltf_file': ltf_file_path,
                'htf_file': htf_file,
                'analysis': analysis
            }
        
        elif analysis['mixed_records'] > 0:
            print(f"\n‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –°–ú–ï–®–ê–ù–ù–´–ï –ó–ê–ü–ò–°–ò: {analysis['mixed_records']}")
            print("üí° –†–ï–®–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∏—Å—Ç—ã–µ LTF –∏ HTF —Ñ–∞–π–ª—ã")
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            separated_files = self.separate_mixed_file(ltf_file_path)
            
            return {
                'status': 'separated_mixed_file',
                'ltf_file': separated_files['ltf_file'],
                'htf_file': separated_files['htf_file'],
                'analysis': analysis
            }
        
        else:
            print("\n‚ö†Ô∏è –§–ê–ô–õ –°–û–î–ï–†–ñ–ò–¢ –¢–û–õ–¨–ö–û LTF –î–ê–ù–ù–´–ï")
            print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°–æ–∑–¥–∞—Ç—å HTF –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            return {
                'status': 'ltf_only',
                'ltf_file': ltf_file_path,
                'analysis': analysis
            }
    
    def separate_mixed_file(self, mixed_file_path):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ LTF –∏ HTF"""
        print("‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
        
        output_dir = Path(mixed_file_path).parent
        ltf_lines = []
        htf_lines = []
        
        with open(mixed_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                fields = self._extract_fields_from_line(line)
                ltf_count = sum(1 for field in fields if self._is_ltf_field(field))
                htf_count = sum(1 for field in fields if self._is_htf_field(field))
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
                if ltf_count > htf_count:
                    # –ë–æ–ª—å—à–µ LTF –ø–æ–ª–µ–π
                    ltf_line = line.replace('HTF|', 'LTF|', 1) if 'HTF|' in line else line
                    ltf_lines.append(ltf_line)
                elif htf_count > 0:
                    # –ï—Å—Ç—å HTF –ø–æ–ª—è
                    htf_line = line.replace('LTF|', 'HTF|', 1) if 'LTF|' in line else line
                    htf_lines.append(htf_line)
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ LTF
                    ltf_lines.append(line)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        ltf_file = output_dir / "dslog_btc_separated_ltf.txt"
        htf_file = output_dir / "dslog_btc_separated_htf.txt"
        
        with open(ltf_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(ltf_lines))
        
        with open(htf_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(htf_lines))
        
        print(f"‚úÖ –§–∞–π–ª—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã:")
        print(f"   LTF: {ltf_file} ({len(ltf_lines)} —Å—Ç—Ä–æ–∫)")
        print(f"   HTF: {htf_file} ({len(htf_lines)} —Å—Ç—Ä–æ–∫)")
        
        return {
            'ltf_file': str(ltf_file),
            'htf_file': str(htf_file)
        }
    
    def create_test_report(self, results):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        report_lines = [
            "üîß –û–¢–ß–ï–¢ –û–ë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò LTF/HTF –†–ê–ó–î–ï–õ–ï–ù–ò–Ø",
            "=" * 60,
            f"–î–∞—Ç–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            f"–°—Ç–∞—Ç—É—Å: {results['status']}",
        ]
        
        if 'analysis' in results:
            analysis = results['analysis']
            report_lines.extend([
                "",
                "–ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê:",
                f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {analysis['total_lines']}",
                f"–í—Å–µ–≥–æ –ø–æ–ª–µ–π: {analysis['total_fields']}",
                f"LTF –ø–æ–ª–µ–π: {analysis['ltf_fields']}",
                f"HTF –ø–æ–ª–µ–π: {analysis['htf_fields']}",
                f"–°–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {analysis['mixed_records']}"
            ])
        
        report_lines.extend([
            "",
            "–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:",
            f"LTF —Ñ–∞–π–ª: {results.get('ltf_file', '–ù–µ —Å–æ–∑–¥–∞–Ω')}",
            f"HTF —Ñ–∞–π–ª: {results.get('htf_file', '–ù–µ —Å–æ–∑–¥–∞–Ω')}",
            "",
            "–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:",
            "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤—ã–º–∏ LTF/HTF —Ñ–∞–π–ª–∞–º–∏",
            "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º"
        ])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = Path("results") / "ltf_htf_fix_report.txt"
        report_file.parent.mkdir(exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
        
        print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")


def main():
    """–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è LTF/HTF —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python ltf_htf_data_fixer.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
        print("–ü—Ä–∏–º–µ—Ä: python ltf_htf_data_fixer.py data/dslog_btc_0508240229_ltf.txt")
        return
    
    file_path = sys.argv[1]
    
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    # –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fixer = LTFHTFDataFixer()
    results = fixer.fix_ltf_htf_separation(file_path)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    fixer.create_test_report(results)
    
    print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª results/ltf_htf_fix_report.txt –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")


if __name__ == "__main__":
    main()