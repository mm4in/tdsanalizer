#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò –ò–ù–î–ò–ö–ê–¢–û–†–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ parser_integration.py
"""

import sys
sys.path.append('.')

from pathlib import Path
import pandas as pd

def test_prioritization():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        from parser_integration import ParserIntegration
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π parser_integration.py –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_file = Path("data/dslog_btc_0508240229_ltf.txt")
        if not test_file.exists():
            print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            return False
        
        print(f"‚úÖ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω: {test_file}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration = ParserIntegration()
        print("‚úÖ ParserIntegration —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –í–ï–°–û–í –ü–†–ò–û–†–ò–¢–ï–¢–ê:")
        for group, weight in integration.group_priority_weights.items():
            print(f"   {group}: –≤–µ—Å x{weight}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        print("\nüîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π...")
        results = integration.replace_old_parser(str(test_file))
        
        if not results:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É—Å–ø–µ—à–µ–Ω")
            return False
        
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π...")
        features = integration.get_features_for_main_system()
        
        if features.empty:
            print("‚ùå –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return False
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(features.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
        print("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò:")
        
        priority_cols = [col for col in features.columns if col.startswith('PRIORITY_')]
        lowpri_cols = [col for col in features.columns if col.startswith('LOWPRI_')]
        derivative_cols = [col for col in features.columns if any(x in col for x in ['_LAG', '_DIFF', '_MA'])]
        
        print(f"   üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(priority_cols)}")
        print(f"   üîÑ –ü–†–û–ò–ó–í–û–î–ù–´–• –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(derivative_cols)}")
        print(f"   üìã –ù–ò–ó–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–•: {len(lowpri_cols)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if priority_cols:
            print(f"\nüéØ –ü–†–ò–ú–ï–†–´ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
            for i, col in enumerate(priority_cols[:5]):
                print(f"   {i+1}. {col}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö
        if lowpri_cols:
            print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ù–ò–ó–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ):")
            for i, col in enumerate(lowpri_cols[:3]):
                print(f"   {i+1}. {col}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        total_indicator_features = len(priority_cols) + len(derivative_cols)
        total_metadata_features = len(lowpri_cols)
        
        print(f"\nüìà –ò–¢–û–ì–û–í–û–ï –°–û–û–¢–ù–û–®–ï–ù–ò–ï:")
        print(f"   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {total_indicator_features}")
        print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {total_metadata_features}")
        
        if total_metadata_features > 0:
            ratio = total_indicator_features / total_metadata_features
            print(f"   –°–û–û–¢–ù–û–®–ï–ù–ò–ï: {ratio:.1f}:1")
            
            if ratio > 3:
                print("   ‚úÖ –û–¢–õ–ò–ß–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç!")
                success = True
            elif ratio > 1:
                print("   ‚ö° –•–û–†–û–®–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç")
                success = True
            else:
                print("   ‚ùå –ü–õ–û–•–û: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç")
                success = False
        else:
            print("   ‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –¢–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏!")
            success = True
        
        # –û—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("\n" + "="*60)
        print(integration.integration_report())
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    success = test_prioritization()
    
    print("\n" + "="*60)
    if success:
        print("üéä –¢–ï–°–¢ –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –†–ï–®–ï–ù–ê!")
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò –ù–ï –ü–†–û–ô–î–ï–ù")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print("="*60)

if __name__ == "__main__":
    main()
